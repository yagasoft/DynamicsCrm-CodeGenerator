<#@ template language="C#" hostspecific="true" #>
<#@ parameter type="Yagasoft.CrmCodeGenerator.Models.Mapper.Context" name="Context"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Yagasoft.CrmCodeGenerator.Models" #>
<#@ import namespace="Yagasoft.CrmCodeGenerator.Models.Mapping" #>
<#@ import namespace="Yagasoft.CrmCodeGenerator.Models.Settings" #>
<#@ import namespace="Yagasoft.CrmCodeGenerator.Models.Attributes" #>
<#@ assembly name="EnvDTE"#>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="System.Xml"#>
<#@ assembly name="System.Xml.Linq"#>
<#@ import namespace="System"#>
<#@ import namespace="System.CodeDom"#>
<#@ import namespace="System.CodeDom.Compiler"#>
<#@ import namespace="System.Data.Linq"#>
<#@ import namespace="System.Data.Linq.Mapping"#>
<#@ import namespace="System.IO"#>
<#@ import namespace="System.Reflection"#>
<#@ import namespace="System.Text"#>
<#@ import namespace="System.Xml.Linq"#>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating"#>
<#@ import namespace="System.Text.RegularExpressions"#>
<#@ import namespace="System.Globalization"#>
<# // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Template version 10.7.3 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< #>
<# // >>>>>>>>>> MINIMUM COMPATIBLE VERSION to successfully generate the schema using this template is 10.4.1. <<<<<<<<<< #>
//         Project / File: <#= Context.Namespace #> / <#= Context.FileName #>.cs
// File generated by: CRM Code Generator - Ahmed Elsawalhy (Yagasoft.com)

using System;
using System.Collections;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.ComponentModel;
<# if (Context.IsAddEntityAnnotations) { #>
using System.ComponentModel.DataAnnotations;
<# } #>
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Linq.Expressions;
using System.Xml.Linq;
using System.Text;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Reflection;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Query;

<# 
   var selectedEntities = Context.Entities.Where(e => Context.SelectedEntities.Contains(e.LogicalName)).ToArray(); 
   var globalEnumerations = new Dictionary<string, MappingEnum>();
#>
<# if (Context.FileName == "CrmSchema") { #>[assembly: ProxyTypesAssemblyAttribute()]<# } #>

namespace <#= Context.Namespace #><# if (Context.FileName != "CrmSchema") { #>.<#= Context.FileName #><#}#>

{
	#region XrmServiceContext

	/// <summary>
	/// Represents a source of entities bound to a CRM service. It tracks and manages changes made to the retrieved entities.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public partial class XrmServiceContext : OrganizationServiceContext
	{
		/// <summary>
		/// Constructor.
		/// </summary>
		public XrmServiceContext(IOrganizationService service) : 
				base(service)
		{
		}

<# foreach (var entityQ in selectedEntities) {
			var crmEntityNameTemp = Context.CrmEntityProfiles.FirstOrDefault(e => e.LogicalName == entityQ.LogicalName);
			var crmEntityName = (crmEntityNameTemp == null || crmEntityNameTemp.EntityRename == null)
				? (Context.UseDisplayNames ? entityQ.FriendlyName : entityQ.HybridName) : crmEntityNameTemp.EntityRename;
#>
		/// <summary>
		/// Gets a binding to the set of all <see cref="<#= crmEntityName #>"/> entities.
		/// </summary>
		public System.Linq.IQueryable<<#= crmEntityName #>> <#= crmEntityName #>Set
		{
			get
			{
				return this.CreateQuery<<#= crmEntityName #>>();
			}
		}
<#}#>
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public class LinqEntityLimiter : ExpressionVisitor
	{
		protected override Expression VisitNew(NewExpression node)
		{
			var constructor = node.Constructor;
			var parameters = constructor.GetParameters();
			var param = node.Arguments.FirstOrDefault();
			var paramType = param?.Type;

			if (paramType != null && constructor.DeclaringType == paramType
				&& parameters.FirstOrDefault()?.ParameterType == typeof(object))
			{
				var valueGetter = paramType.GetMethod("GetAttributeValue", new[] { typeof(string) })?
					.MakeGenericMethod(typeof(object));

				if (valueGetter != null)
				{
					var limiterType = (node.Arguments.Skip(1).FirstOrDefault() as ConstantExpression)?.Value as Type;

					NewArrayExpression keysInit = null;
					NewArrayExpression valuesInit = null;

					if (limiterType == null && (parameters.Length == 1 || parameters.Skip(1).FirstOrDefault()?.ParameterType == typeof(Type)))
					{
						var attributes = paramType.GetProperties().Cast<MemberInfo>().Union(paramType.GetFields())
							.Where(e => Attribute.IsDefined(e, typeof(AttributeLogicalNameAttribute))).ToArray();

						keysInit = Expression.NewArrayInit(typeof(string), attributes
							.Select(e => Expression.Constant(e.GetCustomAttribute<AttributeLogicalNameAttribute>().LogicalName)));
						valuesInit = Expression.NewArrayInit(typeof(object), attributes
							.Select(e => Expression.Call(param, valueGetter,
								Expression.Constant(e.GetCustomAttribute<AttributeLogicalNameAttribute>().LogicalName))));
					}
					else if (limiterType != null && typeof(EntityContract).IsAssignableFrom(limiterType)
						&& parameters.Skip(1).FirstOrDefault()?.ParameterType == typeof(Type))
					{
						var attributes = limiterType.GetProperties().Cast<MemberInfo>().Union(limiterType.GetFields())
							.Where(e => Attribute.IsDefined(e, typeof(CrmFieldMappingAttribute))
								&& !Attribute.IsDefined(e, typeof(CrmRelationMappingAttribute))).ToArray();

						keysInit = Expression.NewArrayInit(typeof(string), attributes
							.Select(e => Expression.Constant(e.GetCustomAttribute<CrmFieldMappingAttribute>().LogicalName)));
						valuesInit = Expression.NewArrayInit(typeof(object), attributes
							.Select(e => Expression.Call(param, valueGetter,
								Expression.Constant(e.GetCustomAttribute<CrmFieldMappingAttribute>().LogicalName))));
					}

					if (keysInit != null)
					{
						var constructorInfo = paramType.GetConstructor(new[] { typeof(string[]), typeof(object[]) });

						if (constructorInfo != null)
						{
							return Expression.New(constructorInfo, keysInit, valuesInit);
						}
					}
				}
			}

			return base.VisitNew(node);
		}
	}

	/// <summary>
	/// Credits: https://github.com/davidfowl/QueryInterceptor
	/// </summary>
	public static class QueryableExtensions
    {
        public static IQueryable<T> InterceptWith<T>(this IQueryable<T> source, params ExpressionVisitor[] visitors)
        {
            if (source == null)
            {
                throw new ArgumentNullException(nameof(source));
            }

            return new QueryTranslator<T>(source, visitors);
        }
    }

    internal class QueryTranslator<T> : IOrderedQueryable<T>
    {
	    public Type ElementType => typeof(T);
        public Expression Expression { get; }
        public IQueryProvider Provider => provider;

		private readonly QueryTranslatorProvider<T> provider;

        public QueryTranslator(IQueryable source, IEnumerable<ExpressionVisitor> visitors)
        {
            if (source == null)
            {
                throw new ArgumentNullException(nameof(source));
            }

            if (visitors == null)
            {
                throw new ArgumentNullException(nameof(visitors));
            }

            Expression = Expression.Constant(this);
            provider = new QueryTranslatorProvider<T>(source, visitors);
        }

        public QueryTranslator(IQueryable source, Expression expression, IEnumerable<ExpressionVisitor> visitors)
        {
	        Expression = expression ?? throw new ArgumentNullException(nameof(expression));
            provider = new QueryTranslatorProvider<T>(source, visitors);
        }

        public IEnumerator<T> GetEnumerator()
        {
            return ((IEnumerable<T>)provider.ExecuteEnumerable(Expression)).GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return provider.ExecuteEnumerable(Expression).GetEnumerator();
        }
    }

    internal abstract class QueryTranslatorProvider : ExpressionVisitor
    {
	    internal IQueryable Source { get; }

		protected QueryTranslatorProvider(IQueryable source)
        {
			Source = source ?? throw new ArgumentNullException(nameof(source));
        }
	}

    internal class QueryTranslatorProvider<T> : QueryTranslatorProvider, IQueryProvider
    {
        private readonly IEnumerable<ExpressionVisitor> visitors;

        public QueryTranslatorProvider(IQueryable source, IEnumerable<ExpressionVisitor> visitors)
            : base(source)
        {
	        this.visitors = visitors ?? throw new ArgumentNullException(nameof(visitors));
        }

        public IQueryable<TElement> CreateQuery<TElement>(Expression expression)
        {
            if (expression == null)
            {
                throw new ArgumentNullException(nameof(expression));
            }

            return new QueryTranslator<TElement>(Source, expression, visitors);
        }

        public IQueryable CreateQuery(Expression expression)
        {
            if (expression == null)
            {
                throw new ArgumentNullException(nameof(expression));
            }

            var elementType = expression.Type.GetGenericArguments().First();
            var result = (IQueryable)Activator.CreateInstance(typeof(QueryTranslator<>).MakeGenericType(elementType),
				Source, expression, visitors);

            return result;
        }

        public TResult Execute<TResult>(Expression expression)
        {
            if (expression == null)
            {
                throw new ArgumentNullException(nameof(expression));
            }

            var result = (this as IQueryProvider).Execute(expression);

            return (TResult)result;
        }

        public object Execute(Expression expression)
        {
            if (expression == null)
            {
                throw new ArgumentNullException(nameof(expression));
            }

            var translated = VisitAll(expression);

            return Source.Provider.Execute(translated);
        }

        internal IEnumerable ExecuteEnumerable(Expression expression)
        {
            if (expression == null)
            {
                throw new ArgumentNullException(nameof(expression));
            }

            var translated = VisitAll(expression);

            return Source.Provider.CreateQuery(translated);
        }

        private Expression VisitAll(Expression expression)
        {
            // Run all visitors in order
            var visitorsQ = new ExpressionVisitor[] { this }.Concat(visitors);
            return visitorsQ.Aggregate(expression, (expr, visitor) => visitor.Visit(expr));
        }

        protected override Expression VisitConstant(ConstantExpression node)
        {
            // Fix up the Expression tree to work with the underlying LINQ provider
	        if (!node.Type.IsGenericType || node.Type.GetGenericTypeDefinition() != typeof(QueryTranslator<>))
	        {
		        return base.VisitConstant(node);
	        }

	        var provider = ((IQueryable)node.Value).Provider as QueryTranslatorProvider;

	        return provider == null ? Source.Expression : provider.Source.Expression;
        }
    }

	#endregion

	#region Extensions

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
    public class ValidationError
    {
        public Guid? RecordId;
        public string AttributeName;

        public ValidationType ErrorType;
        public IDictionary<int, string> ErrorMessage;

        public string StringValue;
        public int? StringMaxLength;

        public decimal? NumericValue;
        public decimal? NumericRangeMin;
        public decimal? NumericRangeMax;
    }

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public class ValidationLocalisation
	{
		public ValidationType ErrorType;
		/// <summary>
		/// A dictionary of language code as key and message format as value
		/// </summary>
		public IDictionary<int, string> Localisation;
	}

	public static partial class CrmGeneratorExtensions
	{
		private class RelationProperty
		{
			internal PropertyInfo Property;
			internal RelationshipSchemaNameAttribute RelationAttribute;
		}

		private static IDictionary<string, IEnumerable<RelationProperty>> relationPropertyCache =
			new ConcurrentDictionary<string, IEnumerable<RelationProperty>>();

	    public static IEnumerable<TEntity> ProcessFetchXmlRelations<TEntity>(this IEnumerable<TEntity> entitiesParam, string fetchXml)
			where TEntity : GeneratedEntityBase
	    {
		    if (string.IsNullOrWhiteSpace(fetchXml))
		    {
				throw new ArgumentNullException(nameof(fetchXml));
		    }

		    if (entitiesParam == null)
		    {
				throw new ArgumentNullException(nameof(entitiesParam));
		    }

		    var entities = entitiesParam.ToArray();

		    if (!entities.Any())
		    {
			    return new TEntity[0];
		    }

		    foreach (var entity in entities)
			{
				var depth = 0;
				ProcessEntity(entity, entity, XElement.Parse(fetchXml).Element("entity"), ref depth);
			}

		    return entities.GroupBy(e => e.Id).Select(ConsolidateEntity).Where(e => e?.Id != Guid.Empty);
	    }

	    private static void ProcessEntity(Entity baseEntity, GeneratedEntityBase targetEntity, XElement xmlElement,
			ref int depth, string intersectingEntity = null)
	    {
		    foreach (var xLink in xmlElement.Elements("link-entity"))
		    {
			    depth++;

			    var linkedName = xLink.Attribute("name")?.Value;
			    var from = xLink.Attribute("from")?.Value;
			    var to = xLink.Attribute("to")?.Value;
			    var alias = GetLinkAlias(xLink, depth);

			    if (string.IsNullOrWhiteSpace(linkedName))
			    {
				    throw new ArgumentNullException(nameof(linkedName), "Linked entity name could not be found in FetchXML.");
			    }

			    if (string.IsNullOrWhiteSpace(from))
			    {
				    throw new ArgumentNullException(nameof(from), 
						$"'from' value could not be found in FetchXML for '{linkedName}'.");
			    }

			    if (string.IsNullOrWhiteSpace(to))
			    {
				    throw new ArgumentNullException(nameof(to), 
						$"'to' value could not be found in FetchXML for '{linkedName}'.");
			    }

			    if (string.IsNullOrWhiteSpace(alias))
			    {
				    throw new ArgumentNullException(nameof(alias), 
						$"'alias' value could not be found in FetchXML for '{linkedName}'.");
			    }

			    var relationParameters = targetEntity.RelationProperties
				    .Select(p => p.Value)
				    .Where(p => p.Length >= 5)
				    .FirstOrDefault(p => p[1].ToString() == linkedName && p[3].ToString() == from && p[4].ToString() == to);
			    var isNn = false;

			    if (relationParameters == null)
			    {
					// intersecting
				    relationParameters = targetEntity.RelationProperties
					    .Select(p => p.Value)
					    .Where(p => p.Length >= 9)
					    .FirstOrDefault(p => linkedName == p[2].ToString());
					isNn = true;

				    if (relationParameters == null)
				    {
					    relationParameters = targetEntity.RelationProperties
						    .Select(p => p.Value)
						    .Where(p => p.Length >= 3)
						    .FirstOrDefault(p => p[2].ToString() == intersectingEntity);
						isNn = false;

					    if (relationParameters == null)
					    {
						    continue;
					    }
				    }
			    }

			    var role = (relationParameters[8] as Type)?.IsArray == true ? EntityRole.Referenced : EntityRole.Referencing;
			    var schemaName = relationParameters[7].ToString();

			    var relationProperties = GetRelationInfoCache(targetEntity);

			    var relationProperty = relationProperties.FirstOrDefault(pa =>
				    pa.RelationAttribute.SchemaName == schemaName
					    && (pa.RelationAttribute.PrimaryEntityRole == role || pa.RelationAttribute.PrimaryEntityRole == null))?
				    .Property;
			    var propertyType = relationProperty?.PropertyType;

			    if (propertyType == null)
			    {
				    continue;
			    }

			    var relatedEntity = PrepareRelation(targetEntity, relationProperty);

			    if (relatedEntity == null)
			    {
				    continue;
			    }

			    foreach (var xAttribute in xLink.Elements("attribute"))
			    {
				    ProcessXAttribute(baseEntity, relatedEntity, alias, xAttribute);
			    }

			    if (xLink.Elements("all-attributes").Any())
			    {
				    ProcessAllAttributes(baseEntity, relatedEntity, alias);
			    }

				// go over the related entity as well for its own relations
			    ProcessEntity(baseEntity, isNn ? targetEntity : relatedEntity, xLink, ref depth, isNn ? linkedName : null);
		    }
	    }

		private static IEnumerable<RelationProperty> GetRelationInfoCache(GeneratedEntityBase targetEntity)
		{
			if (!relationPropertyCache.TryGetValue(targetEntity.LogicalName, out var relationProperties))
			{
				relationProperties = relationPropertyCache[targetEntity.LogicalName] =
					targetEntity.GetType().GetProperties()
						.Where(p => Attribute.IsDefined(p, typeof(RelationshipSchemaNameAttribute)))
						.Select(p =>
							new RelationProperty
							{
								Property = p,
								RelationAttribute = p.GetCustomAttribute<RelationshipSchemaNameAttribute>()
							});
			}

			return relationProperties;
		}

		private static string GetLinkAlias(XElement xLink, int depth)
	    {
		    var linkedName = xLink.Attribute("name")?.Value;

		    if (string.IsNullOrWhiteSpace(linkedName))
		    {
			    return null;
		    }

		    var alias = xLink.Attribute("alias")?.Value;

		    if (string.IsNullOrWhiteSpace(alias))
		    {
			    alias = $"{linkedName}{depth}";
		    }

		    return alias;
	    }

	    private static GeneratedEntityBase PrepareRelation(GeneratedEntityBase targetEntity, PropertyInfo relationProperty)
	    {
		    var propertyType = relationProperty?.PropertyType;

		    if (propertyType == null)
		    {
			    return null;
		    }

		    var isArray = typeof(IEnumerable).IsAssignableFrom(propertyType);
		    var relatedEntityType = propertyType;

		    if (isArray)
		    {
			    relatedEntityType = propertyType.GetElementType();
		    }

		    if (relatedEntityType == null)
		    {
			    return null;
		    }

		    var relatedEntity = Activator.CreateInstance(relatedEntityType) as GeneratedEntityBase;

		    if (relatedEntity == null)
		    {
			    return null;
		    }

		    object relatedValue = relatedEntity;
		    var currentValue = relationProperty.GetValue(targetEntity);

		    if (isArray)
		    {
			    var relatedList = (object[])(currentValue ?? Activator.CreateInstance(propertyType, 1));
			    relatedList[0] = relatedEntity;
			    relatedValue = relatedList;
		    }
		    else if (currentValue != null)
		    {
			    // already parsed N-1
			    return null;
		    }

		    relationProperty.SetValue(targetEntity, relatedValue);

		    return relatedEntity;
	    }

		private static void ProcessXAttribute(Entity baseEntity, GeneratedEntityBase relatedEntity, string relatedAlias,
			XElement xAttribute)
		{
			var	attributeName = xAttribute.Attribute("name")?.Value;
			var attributeAlias = xAttribute.Attribute("alias")?.Value;
			var isAliasedSame = string.IsNullOrWhiteSpace(relatedAlias) || attributeName == attributeAlias;

			if (!string.IsNullOrWhiteSpace(attributeAlias))
			{
				attributeName = attributeAlias;
			}

			ProcessAttribute(baseEntity, relatedEntity, relatedAlias, attributeName, isAliasedSame);
		}

		private static void ProcessAttribute(Entity baseEntity, GeneratedEntityBase relatedEntity, string relatedAlias,
			string attributeName, bool isAliasedSame)
	    {
		    var attribute = baseEntity.Attributes
			    .FirstOrDefault(a => !string.IsNullOrWhiteSpace(relatedAlias) && a.Key == $"{relatedAlias}.{attributeName}").Value
			    ?? baseEntity.Attributes
				    .FirstOrDefault(a => isAliasedSame && a.Key == attributeName).Value;

		    if (attribute is AliasedValue)
		    {
			    var aliasedValue = attribute as AliasedValue;
			    relatedEntity[aliasedValue.AttributeLogicalName] = aliasedValue.Value;
			    return;
		    }

		    if (attribute != null)
		    {
			    relatedEntity[attributeName] = attribute;
		    }
	    }

		private static void ProcessAllAttributes(Entity baseEntity, GeneratedEntityBase relatedEntity, string relatedAlias)
		{
			var attributes = baseEntity.Attributes
				.Where(a =>
					string.IsNullOrWhiteSpace(relatedAlias)
						? !a.Key.Contains($".")
						: a.Key.StartsWith($"{relatedAlias}."));

			foreach (var pair in attributes)
			{
				var attribute = pair.Value;

				AliasedValue aliasedValue;

				if (attribute is AliasedValue)
				{
					aliasedValue = attribute as AliasedValue;
					relatedEntity[aliasedValue.AttributeLogicalName] = aliasedValue.Value;
					continue;
				}

				if (attribute != null)
				{
					relatedEntity[pair.Key] = attribute;
				}
			}
	    }

	    private static TEntity ConsolidateEntity<TEntity>(IGrouping<Guid, TEntity> grouping)
		    where TEntity : GeneratedEntityBase
	    {
		    if (!grouping.Any())
		    {
			    return null;
		    }

		    var baseEntity = grouping.First();

		    var relationProperties = GetRelationInfoCache(baseEntity);
		    var baseRelationProperties = relationProperties
			    .Where(x => x.Property.PropertyType.IsArray
				    && (x.RelationAttribute.PrimaryEntityRole == EntityRole.Referenced
					    || x.RelationAttribute.PrimaryEntityRole == null)).ToArray();

		    foreach (var entity in grouping.Skip(1))
		    {
			    foreach (var relationProperty in baseRelationProperties)
			    {
				    var currentBaseRelationInfo = baseRelationProperties
					    .FirstOrDefault(x => x.RelationAttribute.SchemaName == relationProperty.RelationAttribute.SchemaName)?
						.Property;
				    var currentRelation = (GeneratedEntityBase[])relationProperty.Property.GetValue(entity);

				    if (currentBaseRelationInfo == null || currentRelation == null)
				    {
					    relationProperty.Property.SetValue(baseEntity, null);
					    continue;
				    }

				    var currentBaseRelation = ((GeneratedEntityBase[])currentBaseRelationInfo.GetValue(baseEntity))?
						.Where(e => e?.Id != Guid.Empty).ToArray();

					if (currentBaseRelation == null || !currentBaseRelation.Any())
					{
						currentBaseRelationInfo.SetValue(baseEntity, null);
						continue;
					}

					var baseLength = currentBaseRelation?.Length ?? 0;

				    var newBaseRelation = (GeneratedEntityBase[])Activator.CreateInstance(currentRelation.GetType(), baseLength + 1);

				    if (currentBaseRelation?.Length > 0)
				    {
					    Array.Copy(currentBaseRelation, newBaseRelation, baseLength);
				    }

				    Array.Copy(currentRelation.Where(e => e?.Id != Guid.Empty).ToArray(), 0, newBaseRelation, baseLength, 1);
				    currentBaseRelationInfo.SetValue(baseEntity, newBaseRelation);
			    }
		    }

		    foreach (var baseRelationPropertyInfo in baseRelationProperties)
		    {
			    var baseRelationProperty = baseRelationPropertyInfo.Property;

				var currentRelation = (GeneratedEntityBase[])baseRelationProperty.GetValue(baseEntity);
				var currentRelationFiltered = currentRelation?.Where(e => e?.Id != Guid.Empty).ToArray();

				if (currentRelationFiltered == null || !currentRelationFiltered.Any())
			    {
					baseRelationProperty.SetValue(baseEntity, null);
				    continue;
			    }

			    var related = currentRelation.GroupBy(e => e.Id).Select(ConsolidateEntity)
					.Where(e => e?.Id != Guid.Empty).ToArray();

				if (related == null || !related.Any())
				{
					baseRelationProperty.SetValue(baseEntity, null);
					continue;
				}

				var newRelation = (GeneratedEntityBase[])Activator.CreateInstance(currentRelation.GetType(), related.Length);
			    Array.Copy(related, newRelation, related.Length);
				baseRelationProperty.SetValue(baseEntity, newRelation);
		    }

		    return baseEntity;
	    }
		
		/// <summary>
		/// Converts an enum constant to an OptionSetValue object..
		/// </summary>
		/// <param name="enumMember">The early-bound enum member constant; e.g.: 'Account.IndustryCode.Accounting'</param>
		/// <returns>The OptionSetValue object.</returns>
		public static OptionSetValue ToOptionSetValue(this Enum enumMember)
		{
			return new OptionSetValue(int.Parse(enumMember.ToString("d")));
		}

		/// <summary>
		///     Calling this method on a LINQ will result in limiting attributes retrieved from CRM on any early-bound entity in
		///     the query.<br />
		///     The properties defined in the entity's class will be the ones retrieved from CRM by default; all other attributes
		///     in CRM will be ignored.<br />
		///     The entity <b>must</b> be passed to a constructor of the same type.<br />
		///     Example:
		///     <code>
		/// (from account in new XrmServiceContext(service).AccountSet
		/// select new Account(account)).ToList()
		/// </code>
		/// </summary>
		public static IQueryable<TEntity> LimitAttributes<TEntity>(this IQueryable<TEntity> q) where TEntity : Entity
		{
			return q.InterceptWith(new LinqEntityLimiter());
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationTypes">An array of validations to run. Default is all.</param>
		/// <returns>A single message containing all validation errors.</returns>
		public static string GetValidationErrorsMessage(this Entity entityRecord, ValidationType[] validationTypes)
		{
			return GetValidationErrorsMessage(entityRecord,
				validationLocationsDefaults.Where(local => validationTypes.Contains(local.ErrorType)).ToArray());
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationLocalisation">
		///     [OPTIONAL] An array containing validation types with the message format to use for the validation error.<br />
		///     For validation type "Range", the message format takes three params for min, max, and actual value respectively;
		///         e.g.: "Value must be between {0} and {1}. Actual value was {2}.".<br />
		///     For validation type "MaxLength", the message format takes two params;
		///		    e.g.: "Value length must be less than {0}. Actual value was {1}."<br />
		///     Only include ONE localisation language.<br />
		///     Default is a check on all validation types.
		/// </param>
		/// <returns>A single message containing all validation errors.</returns>
		public static string GetValidationErrorsMessage(this Entity entityRecord, ValidationLocalisation[] validationLocalisation = null)
		{
			if (validationLocalisation != null
				&& validationLocalisation.Any(local => local.Localisation.Count > 1))
			{
				throw new ArgumentOutOfRangeException("validationLocalisation",
					"There should only be one validation localisation language for this method.");
			}

			var validationErrorMessages = GetValidationErrorMessages(entityRecord, validationLocalisation);

			if (validationErrorMessages.Any())
			{
				return validationErrorMessages.Aggregate(
					(message1, message2) => message1 + "\r\n-----------------------\r\n" + message2);
			}

			return null;
		}

		private static readonly ValidationLocalisation[] validationLocationsDefaults =
		{
			new ValidationLocalisation
			{
				ErrorType = ValidationType.Required,
				Localisation = new Dictionary<int, string>
				               {
					               {1033, "Value cannot be null."}
				               }
			},
			new ValidationLocalisation
			{
				ErrorType = ValidationType.Range,
				Localisation = new Dictionary<int, string>
				               {
					               {1033, @"Attribute value must be between ""{0}"" and ""{1}"", inclusive. Actual value was ""{2}""."}
				               }
			},
			new ValidationLocalisation
			{
				ErrorType = ValidationType.MaxLength,
				Localisation = new Dictionary<int, string>
				               {
					               {1033, @"Attribute length must be less than ""{0}"". Actual attribute value was ""{1}""."}
				               }
			}
		};

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationTypes">An array of validations to run.</param>
		/// <returns>A list of messages indicating validation errors.</returns>
		public static List<string> GetValidationErrorMessages(this Entity entityRecord, ValidationType[] validationTypes)
		{
			return GetValidationErrorMessages(entityRecord,
				validationLocationsDefaults.Where(local => validationTypes.Contains(local.ErrorType)).ToArray());
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationLocalisation">
		///     [OPTIONAL] An array containing validation types with the message format to use for the validation error.<br />
		///     For validation type "Range", the message format takes three params for min, max, and actual value respectively;
		///         e.g.: "Value must be between {0} and {1}. Actual value was {2}.".<br />
		///     For validation type "MaxLength", the message format takes two params;
		///		    e.g.: "Value length must be less than {0}. Actual value was {1}."<br />
		///     Only include ONE localisation language.<br />
		///     Default is a check on all validation types.
		/// </param>
		/// <returns>A list of messages indicating validation errors.</returns>
		public static List<string> GetValidationErrorMessages(this Entity entityRecord, ValidationLocalisation[] validationLocalisation = null)
		{
			if (validationLocalisation != null
			    && validationLocalisation.Any(local => local.Localisation.Count > 1))
			{
				throw new ArgumentOutOfRangeException("validationLocalisation",
					"There should only be one validation localisation language for this method.");
			}

			var validationErrors = GetValidationErrors(entityRecord, validationLocalisation);

			if (validationErrors.Any())
			{
				var messages = validationErrors.Select(error => error.ErrorMessage.Values.First()).ToList();
				var id = ((dynamic)entityRecord).Id;
				messages.Insert(0, string.Format("Record of type \"{0}\"" + (id != null ? " and ID \"{1}\"" : "")
													+ " has invalid values.", entityRecord.GetType().Name, id));
				return messages;
			}

			return null;
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationTypes">An array of validations to run.</param>
		/// <returns>A list of validation errors in the form of <see cref="ValidationError"/>.</returns>
		public static List<ValidationError> GetValidationErrors(this Entity entityRecord, ValidationType[] validationTypes)
		{
			return GetValidationErrors(entityRecord,
				validationLocationsDefaults.Where(local => validationTypes.Contains(local.ErrorType)).ToArray());
		}

		///  <summary>
		///      Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///      Validation checks: required, numeric value range, and string length.<br />
		///  </summary>
		///  <param name="validationLocalisation">
		///      [OPTIONAL] An array containing validation types with the message format to use for the validation error.<br />
		///      For validation type "Range", the message format takes three params for min, max, and actual value respectively;
		///          e.g.: "Value must be between {0} and {1}. Actual value was {2}.".<br />
		///      For validation type "MaxLength", the message format takes two params;
		/// 		    e.g.: "Value length must be less than {0}. Actual value was {1}."<br />
		///      Default is a check on all validation types.
		///  </param>
		/// <returns>A list of validation errors in the form of <see cref="ValidationError"/>.</returns>
		public static List<ValidationError> GetValidationErrors(this Entity entityRecord, ValidationLocalisation[] validationLocalisation = null)
		{
			var id = ((dynamic) entityRecord).Id;
			var fields = entityRecord.GetType().GetProperties();
			var exceptions = new List<ValidationError>();

			validationLocalisation = validationLocalisation ?? validationLocationsDefaults;

<# if (Context.IsAddEntityAnnotations || Context.IsAddContractAnnotations) { #>
			var localisation = validationLocalisation.FirstOrDefault(local => local.ErrorType == ValidationType.Required);

			if (localisation != null)
			{
				exceptions.AddRange(from fieldQ in fields
				                    where Attribute.IsDefined(fieldQ, typeof (RequiredAttribute))
				                          && fieldQ.GetValue(entityRecord) == null
				                    select new ValidationError
				                           {
					                           RecordId = id,
					                           AttributeName = fieldQ.Name,
					                           ErrorMessage =
						                           localisation.Localisation.ToDictionary(local => local.Key, local => local.Value),
					                           ErrorType = ValidationType.Required
				                           });
			}

			localisation = validationLocalisation.FirstOrDefault(local => local.ErrorType == ValidationType.Range);

			if (localisation != null)
			{
				foreach (var field in fields.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof (RangeAttribute)) && fieldQ.GetValue(entityRecord) != null))
				{
					var fieldValue = field.GetValue(entityRecord);
					Type type = field.GetCustomAttribute<RangeAttribute>().OperandType;

					var method = type.GetMethods().FirstOrDefault(methodQ => methodQ.GetParameters().Length == 1 && methodQ.Name == "Parse");

					var min = (IComparable) method.Invoke(null, new object[] {field.GetCustomAttribute<RangeAttribute>().Minimum});
					var max = (IComparable) method.Invoke(null, new object[] {field.GetCustomAttribute<RangeAttribute>().Maximum});

					if (fieldValue != null && (min.CompareTo(fieldValue) == 1 || max.CompareTo(fieldValue) == -1))
					{
						exceptions.Add(new ValidationError
						               {
							               RecordId = id,
							               AttributeName = field.Name,
							               ErrorMessage = localisation.Localisation.ToDictionary(local => local.Key,
									               local => string.Format(local.Value, min, max, fieldValue)),
							               ErrorType = ValidationType.Range,
							               NumericValue = decimal.Parse(fieldValue.ToString()),
							               NumericRangeMin = decimal.Parse(min.ToString()),
							               NumericRangeMax = decimal.Parse(max.ToString())
						               });
					}
				}
			}


			localisation = validationLocalisation.FirstOrDefault(local => local.ErrorType == ValidationType.MaxLength);

			if (localisation != null)
			{
				exceptions.AddRange(from fieldQ in fields.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof (MaxLengthAttribute)))
				                    let fieldValue = fieldQ.GetValue(entityRecord) as string
				                    let maxLength = fieldQ.GetCustomAttribute<MaxLengthAttribute>().Length
				                    where fieldValue != null && fieldValue.Length > maxLength
				                    select new ValidationError
				                           {
					                           RecordId = id,
					                           AttributeName = fieldQ.Name,
					                           ErrorMessage = localisation.Localisation.ToDictionary(local => local.Key,
							                           local => string.Format(local.Value, maxLength, fieldValue)),
					                           ErrorType = ValidationType.MaxLength,
					                           StringValue = fieldValue,
					                           StringMaxLength = maxLength
				                           });
			}
<# } #>

			return exceptions;
		}

		public static TEntity ConvertTo<TEntity>(this GeneratedEntityBase crmRecord) where TEntity : EntityContract
		{
			// create entity object
			var record = Activator.CreateInstance<TEntity>();

			var entityType = typeof(TEntity);
			var entityLogicalName = entityType.GetCustomAttribute<CrmEntityMappingAttribute>().LogicalName;
			var properties = entityType.GetProperties().ToArray();

			// if logical names don't match
			if (entityLogicalName != crmRecord.LogicalName)
			{
				throw new Exception(string.Format("CRM entity '{0}' doesn't map to entity '{1}'.",
					crmRecord.GetType().Name, entityType.Name));
			}

			// go over all fields in the contract entity that has the mapping attribute
			foreach (var field in properties
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))
								 && !Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = field.GetCustomAttribute<CrmFieldMappingAttribute>();
				SetValueInRecord(record, field, crmRecord, mapping);
			}

			var relations = properties
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))
					&& !Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))).ToArray();

			// go over all relations in the contract entity that has the mapping attribute
			foreach (var relation in relations)
			{
				// get the value of the mapping attribute
				var mapping = relation.GetCustomAttribute<CrmRelationMappingAttribute>();
				SetRelationInRecord(record, relation, crmRecord, mapping);
			}

			var flattableRelations = relations
				.Select(r =>
					new
					{
						r,
						p = properties
							.Where(p => Attribute.IsDefined(p, typeof(CrmFieldMappingAttribute))
								   && Attribute.IsDefined(p, typeof(CrmRelationMappingAttribute)))
							.Where(
								p =>
								{
									var rAttr = r.GetCustomAttribute<CrmRelationMappingAttribute>();
									var pAttr = p.GetCustomAttribute<CrmRelationMappingAttribute>();
									return rAttr.SchemaName == pAttr.SchemaName
										&& rAttr.Role == pAttr.Role;
								})
					})
				.Where(r => r.p.Any());

			// go over flattened relations in the contract entity that has the mapping attribute
			foreach (var r in flattableRelations)
			{
				SetRelationInRecord(record, r.r, r.p);
			}

			return record;
		}

		private static void SetValueInRecord<TEntity>(TEntity entity, PropertyInfo field, GeneratedEntityBase crmRecord,
			CrmFieldMappingAttribute mapping)
			where TEntity : EntityContract
		{
			// if key not found, then the CRM record doesn't have that value set
			var crmValue = crmRecord.GetAttributeValue<object>(mapping.LogicalName);

			if (crmValue == null)
			{
				return;
			}

			var crmField = crmRecord.GetType().GetProperties()
				.FirstOrDefault(propQ => Attribute.IsDefined(propQ, typeof(AttributeLogicalNameAttribute))
					&& propQ.GetCustomAttribute<AttributeLogicalNameAttribute>().LogicalName == mapping.LogicalName);

			if (crmField == null)
			{
				return;
			}

			var value = crmField.GetValue(crmRecord);

			if (value == null)
			{
				return;
			}

			// convert types
			if (value is Enum)
			{
				var underlyingType = Nullable.GetUnderlyingType(field.PropertyType);

				if (underlyingType == null)
				{
					return;
				}

				// can't set enum value with int using reflection!
				field.SetValue(entity, Enum.ToObject(underlyingType, Convert.ToInt32(value)));

				var labelsProperty = typeof(TEntity).GetProperties().FirstOrDefault(propQ => propQ.Name == field.Name + "Labels");

                if (labelsProperty != null)
                {
                    // get the label value from the CRM record
                    var matchingProperty = crmRecord.GetType().GetProperties().FirstOrDefault(propQ => propQ.Name == field.Name + "Labels");

                    // if it has a value, set it in contract
                    if (matchingProperty != null)
                    {
                        labelsProperty.SetValue(entity, matchingProperty.GetValue(crmRecord));
                    }
                }
			}
			else if (crmValue is EntityReference)
			{
				var entityRef = (EntityReference) crmValue;

				if (field.PropertyType == typeof(Guid?))
				{
					field.SetValue(entity, entityRef.Id);
				}
				else if (field.PropertyType == typeof(LookupValue))
				{
					field.SetValue(entity, new LookupValue(entityRef.LogicalName, entityRef.Id));
				}

				var nameField = typeof(TEntity).GetProperties().FirstOrDefault(fieldQ => fieldQ.Name == field.Name + "Name");

				if (nameField != null && entityRef.Name != null)
				{
					nameField.SetValue(entity, entityRef.Name);
				}

				var labelsProperty = typeof(TEntity).GetProperties().FirstOrDefault(propQ => propQ.Name == field.Name + "Labels");

                if (labelsProperty != null)
                {
                    // get the label value from the CRM record
                    var matchingProperty = crmRecord.GetType().GetProperties().FirstOrDefault(propQ => Attribute.IsDefined(propQ, typeof(LabelAttribute))
                        && propQ.GetCustomAttribute<LabelAttribute>().FieldLogicalName == labelsProperty.GetCustomAttribute<LabelAttribute>().FieldLogicalName);

                    // if it has a value, set it in contract
                    if (matchingProperty != null)
                    {
                        labelsProperty.SetValue(entity, matchingProperty.GetValue(crmRecord));
                    }
                }
			}
			else
			{
				field.SetValue(entity, value);
			}
		}

		private static void SetRelationInRecord<TEntity>(TEntity record, PropertyInfo field, Entity crmRecord,
			CrmRelationMappingAttribute mapping)
			where TEntity : EntityContract
		{
			var crmRelation = crmRecord.GetType().GetProperties()
				.FirstOrDefault(propQ => Attribute.IsDefined(propQ, typeof(RelationshipSchemaNameAttribute))
					&& propQ.GetCustomAttribute<RelationshipSchemaNameAttribute>().SchemaName == mapping.SchemaName
					&& propQ.GetCustomAttribute<RelationshipSchemaNameAttribute>().PrimaryEntityRole.ToString() == mapping.Role.ToString());

			if (crmRelation == null)
			{
				return;
			}

			var fieldType = field.PropertyType;

			object convertedValue = null;

			// x-N relation
			if (typeof(Array).IsAssignableFrom(fieldType))
			{
				var value = crmRelation.GetValue(crmRecord) as Array;

				if (value == null || value.Length <= 0)
				{
					return;
				}

				// get the contract type for the relation
				var elementType = fieldType.GetElementType();

				if (elementType == null)
				{
					return;
				}

				// create an array for the related entities of the appropriate type
				var relatedRecords = Array.CreateInstance(elementType, value.Length);

				// create the method reference that will be used to convert the related entities to the CRM entities
				var method = MethodBase.GetCurrentMethod().DeclaringType?
					.GetMethod("ConvertTo")?.MakeGenericMethod(elementType);

				if (method == null)
				{
					return;
				}

				// convert all entities to contract entities
				var objectRelatedRecords =
					(from object relatedRecord in value
					 select method.Invoke(relatedRecord, new[] { relatedRecord })).ToArray();

				// copy the object entities to the array of the specific type
				Array.Copy(objectRelatedRecords, relatedRecords, relatedRecords.Length);
				convertedValue = relatedRecords;
			}
			else if (typeof(EntityContract).IsAssignableFrom(fieldType))
			{
				var value = crmRelation.GetValue(crmRecord) as GeneratedEntityBase;

				if (value == null)
				{
					return;
				}

				// create the method reference that will be used to convert the related entities to the CRM entities
				var method = MethodBase.GetCurrentMethod().DeclaringType?
					.GetMethod("ConvertTo")?.MakeGenericMethod(fieldType);

				if (method == null)
				{
					return;
				}

				convertedValue = method.Invoke(value, new object[] { value });
			}

			// set the related entities value in the entity
			field.SetValue(record, convertedValue);
		}

		private static void SetRelationInRecord(object record, PropertyInfo relationInfo, IEnumerable<PropertyInfo> flatPropertiesP)
		{
			var relation = relationInfo.GetValue(record);

			if (relation == null)
			{
				return;
			}

			var flatProperties = flatPropertiesP.ToArray();

			var relationProperties = relationInfo.PropertyType.GetProperties()
				.Where(p => Attribute.IsDefined(p, typeof(CrmFieldMappingAttribute))
					&& !Attribute.IsDefined(p, typeof(CrmRelationMappingAttribute)));

			foreach (var relationProperty in relationProperties)
			{
				var flatProperty = flatProperties
					.FirstOrDefault(f => f.GetCustomAttribute<CrmFieldMappingAttribute>().LogicalName
						== relationProperty.GetCustomAttribute<CrmFieldMappingAttribute>().LogicalName);

				if (flatProperty == null)
				{
					continue;
				}

				flatProperty.SetValue(record, relationProperty.GetValue(relation));
			}

			relationInfo.SetValue(record, null);
		}

		/// <summary>
		/// Returns an array of logical names whose property is marked for WCF contract.
		/// </summary>
		/// <param name="entity"></param>
		/// <returns>An array of logical names.</returns>
		public static string[] GetDataMemberAttributes(this Entity entity)
		{
			return entity.GetType().GetProperties()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(DataMemberAttribute)) && Attribute.IsDefined(fieldQ, typeof(AttributeLogicalNameAttribute)))
				.Select(field => field.GetCustomAttribute<AttributeLogicalNameAttribute>().LogicalName).ToArray();
		}

		/// <summary>
		/// Returns an array of logical names of the properties.
		/// </summary>
		/// <param name="entity"></param>
		/// <returns>An array of logical names.</returns>
		public static string[] GetAttributeNames(this Entity entity)
		{
			return entity.GetType().GetProperties()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(AttributeLogicalNameAttribute)) && !Attribute.IsDefined(fieldQ, typeof(RelationshipSchemaNameAttribute)))
				.Select(field => field.GetCustomAttribute<AttributeLogicalNameAttribute>().LogicalName).ToArray();
		}

		/// <summary>
		/// Loads the values of data member properties from CRM.
		/// </summary>
		/// <param name="entity"></param>
		/// <param name="service">CRM organisation service.</param>
		public static void LoadDataMemberAttributes(this Entity entity, IOrganizationService service)
		{
			LoadAttributeValues(entity, service, entity.GetDataMemberAttributes());
		}

		/// <summary>
		/// Loads the values of all properties from CRM.
		/// </summary>
		/// <param name="entity"></param>
		/// <param name="service">CRM organisation service.</param>
		/// <param name="attributes"></param>
		public static void LoadAttributeValues(this Entity entity, IOrganizationService service, params string[] attributes)
		{
			try
			{
				entity.Id = entity.Id;
			}
			catch
			{
				throw new Exception("Entity is ready only. Set 'MergeOption' to 'NoTracking' in the context used for fetching this entity.");
			}

			var isLoadAll = attributes == null || attributes.Length <= 0;

			if (isLoadAll)
			{
				entity.Attributes.Clear();
			}

			foreach (var attribute in service.Retrieve(entity.LogicalName, entity.Id, new ColumnSet(isLoadAll ? entity.GetAttributeNames() : attributes)).Attributes)
			{
				entity[attribute.Key] = attribute.Value;
			}
		}
	}

	#endregion

	#region Helpers

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public abstract class GeneratedEntityBase : Entity<# if (Context.IsImplementINotifyProperty) { #>, INotifyPropertyChanging, INotifyPropertyChanged<# } #>
	{
		protected GeneratedEntityBase()
		{}

		protected GeneratedEntityBase(string logicalName) : base(logicalName)
		{}

		/// <summary>
		///     Initialises this entity with the given keys and values.
		/// </summary>
		protected GeneratedEntityBase(string[] keys, object[] values, string logicalName) : this(logicalName)
		{
			for (var i = 0; i < keys.Length; i++)
			{
				var key = keys[i];
				var value = values[i];

				if (value == null)
				{
					continue;
				}

				Attributes[key] = value;
			}
		}

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type.<br />
		/// <b>OR</b> ...<br />
		///     Constructor that Limits attributes retrieved from CRM on any early-bound entity in a LINQ query.<br />
		///     The properties and fields defined in this class will be the ones retrieved from CRM by default; all other attributes
		///     in CRM will be ignored.<br />
		///     The selected early-bound record of this class's type in the query <b>must</b> be passed to this constructor.<br />
		///     Example:
		///     <code>
		/// (from account in new XrmServiceContext(service).AccountSet
		/// select new Account(account)).ToList()
		/// </code>
		/// </summary>
		protected GeneratedEntityBase(object obj, string logicalName) : base(logicalName)
		{ }

		/// <summary>
		///     Limits attributes retrieved from CRM on any early-bound entity in a LINQ.<br />
		///     The properties and fields defined in the 'limitingType' class will be the ones retrieved from CRM by default;
		///     all other attributes in CRM will be ignored.<br />
		///     The selected early-bound record of this class's type in the query <b>must</b> be passed to this constructor.<br />
		///     Example:
		///     <code>
		/// (from account in new XrmServiceContext(service).AccountSet
		/// select new Account(account, typeof(AccountModel))).ToList()
		/// </code>
		/// </summary>
		protected GeneratedEntityBase(object obj, Type limitingType, string logicalName) : base(logicalName)
		{ }

		[DataMember]
		private List<string> NullValuedAttributes { get; set; }
<# if (Context.IsMakeCrmEntitiesJsonFriendly) { #>
		protected Microsoft.Xrm.Sdk.AttributeCollection backupAttributeCollection;
		protected FormattedValueCollection backupFormattedCollection;
		protected RelatedEntityCollection backupRelatedEntityCollection;
<# } #>
		internal IList<QueryAction> DeferredQueriesList = new List<QueryAction>();
		protected IDictionary<string, object[]> relationProperties;
		public virtual IDictionary<string, object[]> RelationProperties { get { return new Dictionary<string, object[]>(); } }

		#region Serialisation events

<# if (Context.IsMakeCrmEntitiesJsonFriendly) { #>
		[OnSerializing]
		private void SerializingInitializer(StreamingContext ctx)
		{
			backupAttributeCollection = new Microsoft.Xrm.Sdk.AttributeCollection();
			backupAttributeCollection.AddRange(Attributes);
			Attributes.Clear();

			backupFormattedCollection = new FormattedValueCollection();
			backupFormattedCollection.AddRange(FormattedValues);
			FormattedValues.Clear();

			backupRelatedEntityCollection = new RelatedEntityCollection();
			backupRelatedEntityCollection.AddRange(RelatedEntities);
			RelatedEntities.Clear();
		}

		[OnSerialized]
		private void SerializedInitializer(StreamingContext ctx)
		{
			Attributes.Clear();
			Attributes.AddRange(backupAttributeCollection);
			backupAttributeCollection = null;

			FormattedValues.Clear();
			FormattedValues.AddRange(backupFormattedCollection);
			backupFormattedCollection = null;

			RelatedEntities.Clear();
			RelatedEntities.AddRange(backupRelatedEntityCollection);
			backupRelatedEntityCollection = null;
		}

<# } #>
		[OnDeserialized]
		private void DeserializedInitializer(StreamingContext ctx)
		{
			LogicalName = (string)GetType().GetField("EntityLogicalName").GetRawConstantValue();
			Attributes.Where(attribute => attribute.Value == null).ToList().ForEach(attribute => Attributes.Remove(attribute.Key));
			if (NullValuedAttributes != null && NullValuedAttributes.Count > 0)
			{
				NullValuedAttributes.ForEach(attribute =>
				{
					var property = GetType().GetProperty(attribute);
					if (property == null)
					{
						throw new Exception("Couldn't find the property '" + attribute + "' in entity.");
					}
					property.SetValue(this, null);
				});
			}
		}

		#endregion

		public XrmServiceContext ServiceContext { get; set; }

<# if (Context.IsImplementINotifyProperty) { #>
		public event PropertyChangedEventHandler PropertyChanged;
		public event PropertyChangingEventHandler PropertyChanging;

		protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
		{
			PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
		}

		protected void OnPropertyChanging([CallerMemberName] string propertyName = null)
		{
			PropertyChanging?.Invoke(this, new PropertyChangingEventArgs(propertyName));
		}

<# } #>
		public void LoadLookupLabels(IOrganizationService service, bool isDeferred = false)
		{
			var properties = from propQ in this.GetType().GetProperties()
			                 let propIdQ = this.GetType().GetProperty(propQ.Name.Replace("Labels", ""))
			                 where Attribute.IsDefined(propQ, typeof(LabelAttribute))
			                       && (Guid?) propIdQ.GetValue(this) != null
			                 select new
			                        {
				                        property = propQ,
				                        id = propIdQ.GetValue(this),
				                        attribute = propQ.GetCustomAttribute<LabelAttribute>()
			                        };

			foreach (var property in properties)
			{
				var fields = property.attribute.LabelFieldNames.Split(',');

				var query = new QueryExpression(property.attribute.LogicalName);
				query.Criteria.AddCondition(property.attribute.IdFieldName, ConditionOperator.Equal, property.id);
				query.ColumnSet = new ColumnSet(fields.Select(field => field.Substring(5)).ToArray());

				var queryAction =
					new QueryAction(query)
					{
						Action =
							result =>
							{
								var response = result as RetrieveMultipleResponse;
								if (response == null) return;

								var entityQ = response.EntityCollection.Entities.FirstOrDefault();
								if (entityQ == null) return;

								var englishLabel = (string) entityQ.Attributes.FirstOrDefault(
									attribute => ("1033_" + attribute.Key) == fields.FirstOrDefault(field => field.Contains("1033_"))).Value;
								var dictionary = <#= Context.IsUseCustomDictionary ? "new List<OptionsetLanguageLabel>()" : "new Dictionary<int, string>()" #>;
								<#= Context.IsUseCustomDictionary ? "dictionary.Add(new OptionsetLanguageLabel { LanguageCode = 1033, OptionsetLabel = englishLabel })" : "dictionary[1033] = englishLabel" #>;
<# foreach (var lang in Context.Languages.Where(lang => lang != 1033)) { #>
								var langLabel = (string) entityQ.Attributes.FirstOrDefault(attribute =>
										("<#= lang #>_" + attribute.Key) == fields.FirstOrDefault(field => field.StartsWith("<#= lang #>_"))).Value
										        ?? englishLabel;
								<#= Context.IsUseCustomDictionary ? "dictionary.Add(new OptionsetLanguageLabel { LanguageCode = " + lang + ", OptionsetLabel = langLabel })" : "dictionary[" + lang + "] = langLabel" #>;
<# } #>
								property.property.SetValue(this, dictionary);
							}
					};

				if (isDeferred)
				{
					this.DeferredQueriesList.Add(queryAction);
				}
				else
				{
					queryAction.Action.Invoke(service.Execute(new RetrieveMultipleRequest{Query = query}));
				}
			}
		}

		#region Relationship methods

		protected override IEnumerable<TEntity> GetRelatedEntities<TEntity>(string relationshipSchemaName, EntityRole? primaryEntityRole)
		{
		    var key = new Relationship(relationshipSchemaName) { PrimaryEntityRole = primaryEntityRole };

			var enumerable = base.GetRelatedEntities<TEntity>(relationshipSchemaName, primaryEntityRole);

			if (ServiceContext != null && enumerable == null)
			{
				if (!ServiceContext.IsAttached(this))
				{
					throw new Exception("The context that loaded this entity must be used to load relationships, " +
										"or set 'MergeOption' to anything other than 'NoTracking' in the context before fetching this entity using LINQ.");
				}

				ServiceContext.LoadProperty(this, key);
			}

			enumerable = base.GetRelatedEntities<TEntity>(relationshipSchemaName, primaryEntityRole);
<# if (Context.IsMakeCrmEntitiesJsonFriendly) { #>
			
			if (enumerable == null)
			{
				if (backupRelatedEntityCollection != null && backupRelatedEntityCollection.Contains(key))
					enumerable = backupRelatedEntityCollection[key].Entities.Cast<TEntity>();
			}
<# } #>

			return enumerable;
		}

		protected override TEntity GetRelatedEntity<TEntity>(string relationshipSchemaName, EntityRole? primaryEntityRole)
		{
			var key = new Relationship(relationshipSchemaName) { PrimaryEntityRole = primaryEntityRole };

			var result = base.GetRelatedEntity<TEntity>(relationshipSchemaName, primaryEntityRole);

			if (ServiceContext != null && result == null)
			{
				if (!ServiceContext.IsAttached(this))
				{
					throw new Exception("The context that loaded this entity must be used to load relationships, " +
										"or set 'MergeOption' to anything other than 'NoTracking' in the context before fetching this entity using LINQ.");
				}

				ServiceContext.LoadProperty(this, key);
			}

			result = base.GetRelatedEntity<TEntity>(relationshipSchemaName, primaryEntityRole);
<# if (Context.IsMakeCrmEntitiesJsonFriendly) { #>

			if (result == null)
			{
				if (backupRelatedEntityCollection != null && backupRelatedEntityCollection.Contains(key))
					result = (TEntity)backupRelatedEntityCollection[key].Entities.FirstOrDefault();
			}
<# } #>
			
			return result;
		}

		#endregion
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public abstract class GeneratedEntity<TRelationName> : GeneratedEntityBase where TRelationName : RelationNameBase
	{
		protected GeneratedEntity(string logicalName) : base(logicalName)
		{ }

		/// <inheritdoc/>
		protected GeneratedEntity(string[] keys, object[] values, string logicalName) : base(keys, values, logicalName)
		{ }

		/// <inheritdoc/>
		protected GeneratedEntity(object obj, Type limitingType, string logicalName) : base(obj, limitingType, logicalName)
		{ }

		/// <inheritdoc/>
		protected GeneratedEntity(object obj, string logicalName) : base(obj, logicalName)
		{ }

		#region Relationship methods

		/// <summary>
		/// Fetch the records related to this entity on this relationship. 
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, params string[] attributes)
		{
			return LoadRelation(relationName, service, false, -1, -1, null, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. 
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, -1, -1, null, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, FilterExpression filter, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, -1, -1, null, filter, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, recordCountLimit, -1, null, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, int page, string cookie, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, recordCountLimit, page, cookie, null, attributes);
		}

		/// <summary>
		/// Fetch the next page of records related to this entity on this relationship using the previous paging info object returned.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, RelationPagingInfo pagingInfo, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, pagingInfo.RecordCountLimit, pagingInfo.NextPage, pagingInfo.Cookie, pagingInfo.Filter, pagingInfo, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, int page, string cookie, FilterExpression filter, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, recordCountLimit, page, cookie, filter, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, int page, string cookie, FilterExpression filter, RelationPagingInfo pagingInfo, params string[] attributes)
		{
			if (RelatedEntities.IsReadOnly) {
				throw new Exception("Relationship collection is ready only. The context that loaded this entity from CRM must be passed as a parameter, " +
									"or set 'MergeOption' to 'NoTracking' in the context before fetching this entity using LINQ.");
			}
			if (!RelationProperties.ContainsKey(relationName.Name)) {
				throw new Exception("Relation does not exist in entity, or is not generated.");
			}
			var relationPagingInfo = pagingInfo ?? new RelationPagingInfo
				{
					RecordCountLimit = recordCountLimit,
					Filter = filter,
					Cookie = cookie,
					NextPage = page
				};
			var relationParams = RelationProperties[relationName.Name];
			var queryActionObject = new QueryAction(GeneratorHelpers.GetLoadRelationQuery(this, service, (string) relationParams[1], (string) relationParams[2], (string) relationParams[3], (string) relationParams[4], (string) relationParams[5], (string) relationParams[6],
					recordCountLimit, page, cookie, filter, attributes));
			var queryAction = queryActionObject.Action =
							  resultQ => {
								  var response = resultQ as RetrieveMultipleResponse;
								  var entityType = ((Type) relationParams[8]).GetElementType() ?? (Type) relationParams[8];
					              var resultArray = response == null ? ((List<Entity>) resultQ).Select(entityQ => entityQ.GetType().GetMethod("ToEntity").MakeGenericMethod(entityType).Invoke(entityQ, null)).ToArray()
	    				              : response.EntityCollection.Entities.Select(entityQ => entityQ.GetType().GetMethod("ToEntity").MakeGenericMethod(entityType).Invoke(entityQ, null)).ToArray();
					              var relatedRecords = Array.CreateInstance(entityType, resultArray.Length);
					              Array.Copy(resultArray, relatedRecords, resultArray.Length);
								  DeferredQueriesList.Remove(queryActionObject);
								  var newValue = relatedRecords.Length <= 0 ? null : (((Type) relationParams[8]).GetElementType() == null ? relatedRecords.GetValue(0) : relatedRecords);
								  GetType().GetProperty((string) relationParams[0]).SetValue(this, newValue);
							  };
			if (isDeferred) DeferredQueriesList.Add(queryActionObject);
			else queryAction.Invoke(GeneratorHelpers.LoadRelation(service, queryActionObject.Query, recordCountLimit, page, cookie, relationPagingInfo));
			return relationPagingInfo;
		}

		#endregion
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public class RelationPagingInfo
	{
		public string Cookie;
		public int NextPage = 1;
		public int RecordCountLimit = -1;
		public FilterExpression Filter;
		public bool IsMoreRecords = true;
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public abstract class RelationNameBase
	{
		public string Name;

		public RelationNameBase(string name)
		{
			Name = name;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	internal class QueryAction
	{
		public QueryExpression Query { get; set; }
		public Action<object> Action { get; set; }

		public QueryAction(QueryExpression query, Action<object> action = null)
		{
			Query = query;
			Action = action;
		}
	}

	public enum ValidationType
	{
		Required,
		Range,
		MaxLength
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public abstract class LookupKeysBase
	{
		public string Name;

		protected LookupKeysBase(string name)
		{
			Name = name;
		}
	}

	public interface ILookupKeys<in TKey> where TKey : LookupKeysBase
	{
		void AddKey(TKey key, object value);
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract]
	public class CrmActionBase<TInputs, TOutputs>
		where TInputs : CrmActionBase<TInputs, TOutputs>.InputsBase, new()
		where TOutputs : CrmActionBase<TInputs, TOutputs>.OutputsBase, new()
	{
		public IOrganizationService Service;
		public OrganizationRequest Request;
		public OrganizationResponse Response;
		public TInputs InputParams;
		public TOutputs OutputFields;
		
		public CrmActionBase(string actionName)
		{
			Request = new OrganizationRequest(actionName);
			InputParams = new TInputs() { Request = Request };
		}
		
		public CrmActionBase(IOrganizationService service, string actionName) : this(actionName)
		{
			Service = service;
		}

		public TOutputs Execute(IOrganizationService service = null)
		{
			if (service != null)
			{
				Service = service;
			}

			Response = Service.Execute(Request);

			return OutputFields = new TOutputs() { Response = Response };
		}
				
		public abstract class InputsBase
		{
			public OrganizationRequest Request;

			public InputsBase()
			{ }

			public InputsBase(OrganizationRequest request)
			{
				Request = request;
			}
		}
		
		public abstract class OutputsBase
		{
			public OrganizationResponse Response;

			public OutputsBase()
			{ }

			public OutputsBase(OrganizationResponse response)
			{
				Response = response;
			}
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public static partial class GeneratorHelpers
	{
		#region Enums

		/// <summary>
		/// Get the value that corresponds to the label from the option-set,
		/// using the type of the class enclosing both, label type, and the language code given.
		/// </summary>
		/// <param name="labelType">The type of the class containing the labels; e.g.: 'typeof(Account.Enums.Labels.IndustryCode)'</param>
		/// <param name="label">The label to search for, corresponding to the value</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns>The value corresponding to the label</returns>
		public static int GetValue(Type labelType, string label, int languageCode = 1033)
		{
			var labelsType = labelType.DeclaringType;

			if (labelsType == null)
			{
				return -1;
			}

			var enumsType = labelsType.DeclaringType;

			if (enumsType == null)
			{
				return -1;
			}

			// get the fields with the same label from the label class
			var fields = labelType.GetFields()
				.Where(fieldQ => fieldQ.Name.Contains(languageCode.ToString())
					&& (string)fieldQ.GetValue(labelType) == label);

			if (!fields.Any())
			{
				return -1;
			}

			var field = fields.First();

			var entityType = enumsType.DeclaringType;

			if (entityType == null)
			{
				return -1;
			}

			var enumType = entityType.GetNestedType(labelType.Name + "Enum");

			if (enumType == null)
			{
				return -1;
			}

			// get the enum constant corresponding to the field name
			var enumConstant = Enum.Parse(enumType, field.Name.Replace("_" + languageCode, ""));

			return (int)enumConstant;
		}

		/// <summary>
		/// Gets the value corresponding to the option-set's label using its logical name,
		/// the value within, and the language code.
		/// </summary>
		/// <param name="logicalName">The logical name of the option-set in CRM</param>
		/// <param name="label">The label from the option-set</param>
		/// <param name="enumsType">The 'Enums' type; e.g.: 'typeof(Account.Enums)'</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns>The value corresponding to the label</returns>
		public static int GetValue(string logicalName, string label, Type enumsType, int languageCode = 1033)
		{
			var labelType = GetLabelType(enumsType, logicalName);

			return GetValue(labelType, label, languageCode);
		}

		private static Type GetEnumType(Type enumsType, string logicalName)
		{
			var field = GetLogicalNameField(enumsType, logicalName);

			var entityType = enumsType.DeclaringType;

			if (entityType == null)
			{
				throw new Exception("Can't find the entity type from the enum type.");
			}

			return field == null ? null : entityType.GetNestedType(field.Name + "Enum");
		}

		#endregion

		#region Labels

		/// <summary>
		/// Gets the label corresponding to the option-set's value using its logical name,
		/// the value within, and the language code.
		/// </summary>
		/// <param name="logicalName">The logical name of the option-set in CRM</param>
		/// <param name="constant">The value from the option-set</param>
		/// <param name="enumsType">The 'Enums' type; e.g.: 'typeof(Account.Enums)'</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns></returns>
		public static string GetLabel(string logicalName, int constant, Type enumsType, int languageCode = 1033)
		{
			var enumType = GetEnumType(enumsType, logicalName);

			if (enumType == null)
			{
				return null;
			}

			var enumName = enumType.Name;
			var constantName = enumType.GetEnumName(constant);
			var labelsType = enumsType.GetNestedType("Labels");

			if (labelsType == null)
			{
				return null;
			}

			var labelType = labelsType.GetNestedType(enumName.Substring(0, enumType.Name.LastIndexOf("Enum")));

			if (labelType == null)
			{
				return null;
			}

			var field = labelType.GetField(constantName + "_" + languageCode);

			return field == null ? null : field.GetValue(labelType).ToString();
		}

		private static Type GetLabelType(Type enumsType, string logicalName)
		{
			var field = GetLogicalNameField(enumsType, logicalName);
			return enumsType.GetNestedType("Labels").GetNestedType(field.Name);
		}

		#endregion

		private static FieldInfo GetLogicalNameField(Type enumsType, string logicalName)
		{
			var namesType = enumsType.GetNestedType("Names");
			return namesType.GetFields().FirstOrDefault(fieldQ => (string)fieldQ.GetValue(namesType) == logicalName);
		}

		internal static QueryExpression GetLoadRelationQuery(Entity entity, IOrganizationService service,
			string fromEntityName, string toEntityName, string fromFieldName, string toFieldName,
			string idFieldName, string intersectIdFieldName, int limit = -1, int page = -1, string cookie = null,
			FilterExpression filter = null, params string[] attributes)
		{
			limit = limit <= 0 ? int.MaxValue : limit;

			// create the query taking into account paging
			var query = new QueryExpression(fromEntityName);
			query.LinkEntities.Add(new LinkEntity(fromEntityName, toEntityName, fromFieldName, toFieldName, JoinOperator.Inner));
			query.LinkEntities[0].EntityAlias = "linkedEntityAlias";
			query.Criteria.AddCondition("linkedEntityAlias", intersectIdFieldName, ConditionOperator.Equal, entity[idFieldName]);

			if (filter != null)
			{
				query.Criteria.AddFilter(filter);
			}

			if (attributes.Length == 1 && attributes[0] == "*")
			{
				query.ColumnSet = new ColumnSet(true);
			}
			else if (attributes.Length > 0)
			{
				query.ColumnSet = new ColumnSet(attributes);
			}
			else
			{
				query.ColumnSet = new ColumnSet(false);
			}

			query.PageInfo = new PagingInfo
			{
				PageNumber = page <= 0 ? 1 : page,
				Count = limit,
				PagingCookie = cookie
			};

			return query;
		}

		internal static List<Entity> LoadRelation(Entity entity, IOrganizationService service,
			string fromEntityName, string toEntityName, string fromFieldName, string toFieldName,
			string idFieldName, string intersectIdFieldName, int limit = -1, int page = -1,
			FilterExpression filter = null, string cookie = null, RelationPagingInfo relationPagingInfo = null, params string[] attributes)
		{
			return LoadRelation(service, GetLoadRelationQuery(entity, service, fromEntityName, toEntityName,
				fromFieldName, toFieldName, idFieldName, intersectIdFieldName, limit, page, cookie,
				filter, attributes), limit, page, cookie, relationPagingInfo);
		}

		public static List<Entity> LoadRelation(IOrganizationService service, QueryExpression query,
			int limit = -1, int page = -1, string cookie = null, RelationPagingInfo relationPagingInfo = null)
		{
			limit = limit <= 0 ? int.MaxValue : limit;
			query.PageInfo = query.PageInfo ??
				new PagingInfo
				{
					PageNumber = page <= 0 ? 1 : page,
					Count = limit
				};
			query.PageInfo.PagingCookie = cookie ?? relationPagingInfo.Cookie ?? query.PageInfo.PagingCookie;

			EntityCollection records;
			var entities = new List<Entity>();

			// get all records
			do
			{
				// fetch the records
				records = service.RetrieveMultiple(query);

				// next time get the next bundle of records
				query.PageInfo.PagingCookie = records.PagingCookie;
				query.PageInfo.PageNumber++;

				// add to existing list
				entities.AddRange(records.Entities);
			} while (records.MoreRecords && entities.Count < limit && page <= 0);

			if (relationPagingInfo != null)
			{
				relationPagingInfo.Cookie = query.PageInfo.PagingCookie;
				relationPagingInfo.NextPage = query.PageInfo.PageNumber;
				relationPagingInfo.IsMoreRecords = records.MoreRecords;
			}

			return entities.ToList();
		}

		/// <summary>
		/// Executes the queries in the query queue in each entity passed, and executes the action related to the query after.<br />
		/// Returns a list of errors per entity processed.
		/// </summary>
		/// <param name="service">CRM service to use to execute query.</param>
		/// <param name="entities">List of entities containing the queues.</param>
		public static IDictionary<GeneratedEntityBase, IList<string>> ProcessDeferredQueries(IOrganizationService service,
			params GeneratedEntityBase[] entities)
		{
            return ProcessDeferredQueries(service, 100, entities);
        }

		/// <summary>
		/// Executes the queries in the query queue in each entity passed, and executes the action related to the query after.<br />
		/// Returns a list of errors per entity processed.
		/// </summary>
		/// <param name="service">CRM service to use to execute query.</param>
		/// <param name="bulkSize">The number of requests from the queue to execute in each iteration.</param>
		/// <param name="entities">List of entities containing the queues.</param>
		internal static IDictionary<GeneratedEntityBase, IList<string>> ProcessDeferredQueries(IOrganizationService service,
			int bulkSize, params GeneratedEntityBase[] entities)
		{
			var errorList = new Dictionary<GeneratedEntityBase, IList<string>>();

			// exit if no entities to process
			if (!entities.Any()) return errorList;
            
            bulkSize = Math.Min(1000, bulkSize);

			// filter entities to only the ones with a queue
			entities = entities.Where(entity => entity.DeferredQueriesList.Any()).ToArray();

			// queue to assign errors to proper entity and to find the original query and invoke the action
			var queryActionQueue = new Queue<KeyValuePair<GeneratedEntityBase, QueryAction>>();

			// create a queue to support paging in bulk execution
			var requestsQueue = new Queue<OrganizationRequest>();

			// go over the entities and fill the queues
			foreach (var entity in entities)
			{
				foreach (var queryAction in entity.DeferredQueriesList)
				{
					queryActionQueue.Enqueue(new KeyValuePair<GeneratedEntityBase, QueryAction>(entity, queryAction));
					requestsQueue.Enqueue(new RetrieveMultipleRequest {Query = queryAction.Query});
				}
			}

			var bulkQuery = new ExecuteMultipleRequest
			{
				Settings = new ExecuteMultipleSettings
				{
					ContinueOnError = true,
					ReturnResponses = true
				},
				Requests = new OrganizationRequestCollection()
			};

			while (requestsQueue.Any())
			{
				bulkQuery.Requests.Clear();

				// page execution
				do
				{
					bulkQuery.Requests.Add(requestsQueue.Dequeue());
				} while (bulkQuery.Requests.Count % bulkSize != 0 && requestsQueue.Any());

				var result = (ExecuteMultipleResponse) service.Execute(bulkQuery);

				foreach (var response in result.Responses)
				{
					var queryAction = queryActionQueue.Dequeue();
					var entity = queryAction.Key;

					// parse fault
					if (response.Fault != null)
					{
						if (!errorList.ContainsKey(entity))
						{
							errorList.Add(entity, new List<string>());
						}

						errorList[entity].Add(string.Format("Error code: {0}.\nError message: {1}.",
							response.Fault.ErrorCode, response.Fault.Message)
													 + (!string.IsNullOrEmpty(response.Fault.TraceText)
															? "\nError trace: " + response.Fault.TraceText
															: ""));

						continue;
					}

					queryAction.Value.Action.Invoke(response.Response);
				}
			}

			return errorList;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
    public class EntityComparer : IEqualityComparer<Entity>
    {
        public bool Equals(Entity x, Entity y)
        {
            return x.Id == y.Id;
        }

        public int GetHashCode(Entity obj)
        {
            return obj.Id.GetHashCode();
        }
    }

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public static class TypeHelpers
	{
		public static Type GetType(string name, Type assemblyScope = null)
		{
			return assemblyScope == null
				? AppDomain.CurrentDomain.GetAssemblies().SelectMany(a => a.GetTypes())
					.FirstOrDefault(e => e.AssemblyQualifiedName == name || e.FullName == name || e.Name == name)
				: assemblyScope.Assembly.GetTypes()
					.FirstOrDefault(e => e.AssemblyQualifiedName == name || e.FullName == name || e.Name == name);
		}
	}

	public partial class EntityContract
	{
		public TCrmEntity ConvertTo<TCrmEntity>(ClearMode? clearMode = null) where TCrmEntity : Entity
		{
			// create CRM entity object
			var crmRecord = Activator.CreateInstance<TCrmEntity>();

			var entityType = GetType();
			var entityLogicalName = entityType.GetCustomAttribute<CrmEntityMappingAttribute>().LogicalName;

			// if logical names don't match
			if (entityLogicalName != crmRecord.LogicalName)
			{
				throw new Exception($"Entity '{entityType.Name}' doesn't map to CRM entity '{typeof(TCrmEntity).Name}'.");
			}

			clearMode = clearMode
				?? (ClearMode?)entityType.GetProperty("ValueClearMode")?.GetValue(this)
					?? ClearMode.Disabled;

			// go over all fields in the contract entity that has the mapping attribute
			foreach (var field in entityType.GetProperties()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))
					&& !Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = field.GetCustomAttribute<CrmFieldMappingAttribute>();
				// get the value of the field
				var value = field.GetValue(this);
				// is the field value read only
				var isReadOnly = field.GetCustomAttribute<ReadOnlyFieldAttribute>() != null;
				// get the clear flag mode value if it exists
				var isClearFlag = clearMode == ClearMode.Flag
					&& (bool?)entityType.GetProperties().Where(fieldQ => fieldQ.Name == "Clear_" + field.Name)
						.Select(fieldQ => fieldQ.GetValue(this)).FirstOrDefault() == true;
				// check 'empty' mode
				var isClearEmpty = clearMode == ClearMode.Empty;
				var isClearConvention = clearMode == ClearMode.Convention;

				var isSetValue = value != null || isClearFlag || isClearEmpty || isClearConvention;

				// skip if no value and clear mode does not match and pass check
				if (isReadOnly || !isSetValue)
				{
					continue;
				}

				SetValueInCrmRecord(value, crmRecord, field.Name, mapping, clearMode, isClearFlag);
			}

			// go over flattened relations in the contract entity that has the mapping attribute
			foreach (var field in GetType().GetProperties()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))
					&& Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
			{
				// get the value of the field
				var value = field.GetValue(this);
				// is the field value read only
				var isReadOnly = field.GetCustomAttribute<ReadOnlyFieldAttribute>();

				// skip if no value
				if (isReadOnly != null || (value == null && clearMode != ClearMode.Empty) || value is Array)
				{
					continue;
				}

				SetRelationInRecord(value, field);
			}

			// go over all relations in the contract entity that has the mapping attribute
			foreach (var relation in GetType().GetProperties()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))
					&& !Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = relation.GetCustomAttribute<CrmRelationMappingAttribute>();
				// get the value of the field
				var value = relation.GetValue(this);
				// is the relation read only
				var isReadOnly = relation.GetCustomAttribute<ReadOnlyFieldAttribute>();

				// skip if no value
				if (isReadOnly != null || value == null || (value is Array && ((Array)value).Length <= 0))
				{
					continue;
				}

				SetRelationInCrmRecord(value, crmRecord, mapping, clearMode);
			}

			return crmRecord;
		}

		private void SetRelationInRecord(object value, PropertyInfo propertyInfo)
		{
			// get the property representing the relationship
			var relation = GetType().GetProperties()
				.Where(fQ => !Attribute.IsDefined(fQ, typeof(CrmFieldMappingAttribute))
					&& Attribute.IsDefined(fQ, typeof(CrmRelationMappingAttribute)))
				.FirstOrDefault(
					fQ =>
					{
						var rAttr = fQ.GetCustomAttribute<CrmRelationMappingAttribute>();
						var relationAttr = propertyInfo.GetCustomAttribute<CrmRelationMappingAttribute>();
						return rAttr.SchemaName == relationAttr.SchemaName && rAttr.Role == relationAttr.Role;
					});

			if (relation == null)
			{
				return;
			}

			// get the related entity type
			var type = relation.PropertyType;
			// get the target property in the related entity to set the value
			var mappedProperty = type.GetProperties()
				.Where(fQ => Attribute.IsDefined(fQ, typeof(CrmFieldMappingAttribute))
					&& !Attribute.IsDefined(fQ, typeof(CrmRelationMappingAttribute)))
				.FirstOrDefault(p => p.GetCustomAttribute<CrmFieldMappingAttribute>().LogicalName
					== propertyInfo.GetCustomAttribute<CrmFieldMappingAttribute>().LogicalName);

			if (mappedProperty == null)
			{
				return;
			}

			// get the relation value
			var record = relation.GetValue(this);

			if (record == null)
			{
				// create a new instance of the related entity if it's null
				record = Activator.CreateInstance(type);
				// save the relation object in this entity
				relation.SetValue(this, record);
			}

			// set the field value in the related record
			mappedProperty.SetValue(record, value);
		}

		private static void SetValueInCrmRecord<TCrmEntity>(object value, TCrmEntity crmRecord,
			string fieldName, CrmFieldMappingAttribute mapping, ClearMode? clearMode = null, bool isClearFlag = false)
			where TCrmEntity : Entity
		{
			var crmProperty = GetCrmProperty<TCrmEntity>(mapping);

			if (crmProperty == null)
			{
				return;
			}
            
			// if no value, and clear mode is global or flagged, then clear
			if (value == null && (clearMode == ClearMode.Empty || isClearFlag))
			{
				crmRecord[mapping.LogicalName] = null;
			}
            
			// convert types
			if (value is Enum)
			{
			    // if clear mode is convention, and value fits convention, then clear
				var intVal = Convert.ToInt32(value);
				crmRecord[mapping.LogicalName] =
					(intVal == -1 && clearMode == ClearMode.Convention)
						? null
						: new OptionSetValue(intVal);
			}
			else if (value is decimal && crmProperty.PropertyType == typeof(Money))
			{
				crmRecord[mapping.LogicalName] =
					(value.Equals(decimal.MinValue) && clearMode == ClearMode.Convention)
						? null
						: new Money(((decimal?)value).Value);
			}
			else if (value is Guid && fieldName != "Id" && crmProperty.PropertyType == typeof(Guid?))
			{
				crmProperty.SetValue(crmRecord,
					(value.Equals(Guid.Empty) && clearMode == ClearMode.Convention)
						? null
						: (Guid?)value);
			}
			else if (value is LookupValue)
			{
				var lookupValue = (LookupValue)value;

				if (crmProperty.PropertyType == typeof(LookupValue))
				{
					crmProperty.SetValue(crmRecord,
						(lookupValue.Id.Equals(Guid.Empty) && clearMode == ClearMode.Convention)
							? null
							: value);
				}
				else if (crmProperty.PropertyType == typeof(EntityReference))
				{
					crmProperty.SetValue(crmRecord,
						(lookupValue.Id.Equals(Guid.Empty) && clearMode == ClearMode.Convention)
							? null
							: new EntityReference(lookupValue.EntityName, lookupValue.Id));
				}
			}
			else
			{
			    // if clear mode is convention, and value fits convention, then clear
			    if (clearMode == ClearMode.Convention
                    && ((value is DateTime && value.Equals(new DateTime(1970, 1, 1)))
                        || (value is int && value.Equals(int.MinValue))
                        || (value is long && value.Equals(long.MinValue))
                        || (value is decimal && value.Equals(decimal.MinValue))
                        || (value is double && value.Equals(double.MinValue))
                        || (value is Array && (value as Array).Length <= 0)
                        || (value is string && value.Equals(""))))
			    {
				    crmProperty.SetValue(crmRecord, null);
			    }
                else
				{
                    crmProperty.SetValue(crmRecord, value);
                }
			}
		}

		/// <summary>
		///     Gets the property from the CRM entity that corresponds to this field -- same mapping
		/// </summary>
		/// <typeparam name="TCrmEntity">The type of the entity.</typeparam>
		/// <param name="mapping">The mapping.</param>
		/// <returns></returns>
		private static PropertyInfo GetCrmProperty<TCrmEntity>(CrmFieldMappingAttribute mapping)
			where TCrmEntity : Entity
		{
			var crmProperty = typeof(TCrmEntity).GetProperties()
				.FirstOrDefault(propertyQ =>
								{
									var fieldAttribute = propertyQ
										.GetCustomAttributes<AttributeLogicalNameAttribute>(true)
										.FirstOrDefault();

									return fieldAttribute != null
										   && fieldAttribute.LogicalName == mapping.LogicalName;
								});

			return crmProperty;
		}

		private static void SetRelationInCrmRecord<TCrmEntity>(object value, TCrmEntity crmRecord,
			CrmRelationMappingAttribute mapping, ClearMode? clearMode = null)
			where TCrmEntity : Entity
		{
			var crmRelation = GetCrmRelation<TCrmEntity>(mapping);

			// if relation not found, then the entities don't map correctly
			if (crmRelation == null)
			{
				throw new Exception($"Entity doesn't map to CRM entity '{typeof(TCrmEntity).Name}'.");
			}

			object convertedValue = null;

			var type = TypeHelpers.GetType(mapping.RelatedEntityName);

			if (type == null)
			{
				throw new TypeLoadException($"Could not find type {mapping.RelatedEntityName} to convert contract record.");
			}

			// x-N relation
			if (value is Array)
			{
				var relatedRecords = (Array)value;
				// create an array for the related entities of the appropriate type
				var crmRelatedRecords = Array.CreateInstance(type, relatedRecords.Length);

				// create the method reference that will be used to convert the related entities to the CRM entities
				var method = GetConversionMethod(relatedRecords.GetValue(0), type);

				if (method == null)
				{
					return;
				}

				// convert all entities to CRM entities
				var objectCrmRelatedRecords =
					(from object relatedRecord in relatedRecords
					 select method.Invoke(relatedRecord, new object[] { clearMode })).ToArray();

				// copy the object entities to the array of the specific type
				Array.Copy(objectCrmRelatedRecords, crmRelatedRecords, crmRelatedRecords.Length);
				convertedValue = crmRelatedRecords;
			}
			else if (value is EntityContract)
			{
				// N-1 relation
				var method = GetConversionMethod(value, type);

				if (method == null)
				{
					return;
				}

				convertedValue = method.Invoke(value, new object[] { clearMode });
			}

			// set the related entities value in the CRM entity
			crmRelation.SetValue(crmRecord, convertedValue);
		}

		private static MethodInfo GetConversionMethod(object entity, Type relatedType)
		{
			return entity.GetType().GetMethod("ConvertTo")?.MakeGenericMethod(relatedType);
		}

		/// <summary>
		///     Gets the relation from the CRM entity that corresponds to this relation -- same mapping
		/// </summary>
		/// <typeparam name="TCrmEntity">The type of the entity.</typeparam>
		/// <param name="mapping">The mapping.</param>
		/// <returns></returns>
		private static PropertyInfo GetCrmRelation<TCrmEntity>(CrmRelationMappingAttribute mapping)
			where TCrmEntity : Entity
		{
			var crmRelation = typeof(TCrmEntity).GetProperties()
				.FirstOrDefault(propertyQ =>
								{
									var relationAttribute = propertyQ
										.GetCustomAttributes<RelationshipSchemaNameAttribute>(true)
										.FirstOrDefault();

									return relationAttribute != null
										   && relationAttribute.SchemaName == mapping.SchemaName
										   && relationAttribute.PrimaryEntityRole == (EntityRole?)mapping.Role;
								});

			return crmRelation;
		}
	}

	#endregion

<#
   /***********************************************************
    **********************************************************
    *********************************************************
    ********************************************************
    *******************************************************
    ******************************************************
    *****************************************************
    ****************************************************
    ***************************************************
    **************************************************
    *************************************************
    ************************************************
    ***********************************************
    **********************************************
    *********************************************
	// *** >>>> CRM Actions generator <<<<
    *********************************************
    **********************************************
    ***********************************************
    ************************************************
    *************************************************
    **************************************************
    ***************************************************
    ****************************************************
    *****************************************************
    ******************************************************
    *******************************************************
    ********************************************************
    *********************************************************
    **********************************************************
   **/
#>
<# if (Context.GenerateGlobalActions && Context.GlobalActions.Any()) { #>
	#region Global Actions

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public static class GlobalActions
	{
<#	ParseActions(Context.GlobalActions); #>
	}

	#endregion

<# } #>

	#region Actions

<# foreach (var entity in selectedEntities.Where(entity => entity.Actions.Any() && Context.SelectedActions.Keys.Contains(entity.LogicalName))) {
        var entityFilter = Context.CrmEntityProfiles.FirstOrDefault(e => e.LogicalName == entity.LogicalName);
		var crmEntityName = (entityFilter == null || entityFilter.EntityRename == null)
				? (Context.UseDisplayNames ? entity.FriendlyName : entity.HybridName) : entityFilter.EntityRename;
#>
	public partial class <#= crmEntityName #>
	{
		public static class Actions
		{
<#	ParseActions(entity.Actions.Where(e => Context.SelectedActions[entity.LogicalName].Contains(e.Name)).ToArray()); #>
		}
	}

<# } #>
	#endregion

<#
   /***********************************************************
    **********************************************************
    *********************************************************
    ********************************************************
    *******************************************************
    ******************************************************
    *****************************************************
    ****************************************************
    ***************************************************
    **************************************************
    *************************************************
    ************************************************
    ***********************************************
    **********************************************
    *********************************************
	// *** >>>> Known types generator <<<<
    *********************************************
    **********************************************
    ***********************************************
    ************************************************
    *************************************************
    **************************************************
    ***************************************************
    ****************************************************
    *****************************************************
    ******************************************************
    *******************************************************
    ********************************************************
    *********************************************************
    **********************************************************
   **/
#>
	#region Known Types
<# 
    List<string> KnownTypes = new List<string>();

	foreach (var entity in selectedEntities)
    {
        var entityProfiles = Context.EntityProfilesHeaderSelector;
        var entityFilter = Context.CrmEntityProfiles.FirstOrDefault(e => e.LogicalName == entity.LogicalName);
		
        foreach (var entityFilterT in entityProfiles.EntityProfilesHeaders
            .Where(entityFilterT => entityFilterT.EntityProfiles.Any(filter => filter.LogicalName == entity.LogicalName)
				&& entityFilterT.EntityProfiles.First(filter => filter.LogicalName == entity.LogicalName).IsIncluded)) {
            var prefix = entityFilterT.Prefix;
            var suffix = entityFilterT.Suffix;
            var entityFilterQ = entityFilterT.EntityProfiles.FirstOrDefault(filter => filter.LogicalName == entity.LogicalName);
            var crmEntityName = (entityFilter == null || entityFilter.EntityRename == null)
					? (Context.UseDisplayNames ? entity.FriendlyName : entity.HybridName) : entityFilter.EntityRename;
            var contractEntityName = (entityFilterQ == null || entityFilterQ.EntityRename == null) ? crmEntityName : entityFilterQ.EntityRename;

            KnownTypes.Add(prefix + contractEntityName + suffix);
        }
    }
	
 if (KnownTypes.Any()) {
#>

	[<#= "KnownType(typeof(" + KnownTypes.Distinct().Aggregate((type1, type2) => type1 + ")),\r\n\t\tKnownType(typeof(" + type2) + "))" #>]
	public partial class EntityContract
	{
	}
<# } #>

	#endregion

<#
   /***********************************************************
    **********************************************************
    *********************************************************
    ********************************************************
    *******************************************************
    ******************************************************
    *****************************************************
    ****************************************************
    ***************************************************
    **************************************************
    *************************************************
    ************************************************
    ***********************************************
    **********************************************
    *********************************************
	// *** >>>> Lookup keys generator <<<<
    *********************************************
    **********************************************
    ***********************************************
    ************************************************
    *************************************************
    **************************************************
    ***************************************************
    ****************************************************
    *****************************************************
    ******************************************************
    *******************************************************
    ********************************************************
    *********************************************************
    **********************************************************
   **/
#>
<# if (Context.IsGenerateAlternateKeys && Context.IsUseCustomTypeForAltKeys) { #>
	#region Lookup Keys

<#	var lookupKeyData = selectedEntities.SelectMany(e => e.Fields)
		.Where(e => e.LookupData != null && e.LookupData.LookupKeys != null && e.LookupData.LookupKeys.Entity != null)
		.Select(e => (e.LookupData == null || e.LookupData.LookupKeys == null) ? null : e.LookupData.LookupKeys)
		.GroupBy(e => e.Entity.LogicalName);

	foreach (var lookupKey in lookupKeyData) {
		var lookupEntity = lookupKey.First().Entity;
		var lookupEntityName = Context.UseDisplayNames
			? ((lookupEntity == null || lookupEntity.FriendlyName == null) ? null : lookupEntity.FriendlyName)
			: ((lookupEntity == null || lookupEntity.HybridName == null) ? null : lookupEntity.HybridName);
#>
	public partial class <#= lookupEntityName #>
	{
		public class LookupKeys
		{
			private readonly EntityReference reference;
			public LookupKeys(EntityReference reference) { this.reference = reference; }
<#	var keyFieldData = lookupKey.SelectMany(e => e.Fields).GroupBy(e => e.LogicalName);

	foreach (var keyField in keyFieldData) {
		var field = keyField.First();
        var fieldName = Context.UseDisplayNames ? field.FriendlyName : field.DisplayName;
        var fieldLogicalName = field.Attribute.LogicalName;
        var fieldType = field.TargetTypeForCrmSvcUtil;
#>
			public LookupKeys Add<#= fieldName #>Key(<#= fieldType #> value) { reference.KeyAttributes.Add("<#= fieldLogicalName #>", value); return this; }
<# } #>
		}
	}

<# } #>
	#endregion

<# } #>
	#region Entities
<#
	var manager = Manager.Create(Host, GenerationEnvironment);
	Generate(manager, globalEnumerations);
	GenerateContracts(manager);
	GenerateBase(manager);
	GenerateGlobalEnumerations(manager, globalEnumerations);
	CloseFiles(manager);
#>
<#+
   /***********************************************************
    **********************************************************
    *********************************************************
    ********************************************************
    *******************************************************
    ******************************************************
    *****************************************************
    ****************************************************
    ***************************************************
    **************************************************
    *************************************************
    ************************************************
    ***********************************************
    **********************************************
    *********************************************
	// *** >>>> CRM entities generator <<<<
    *********************************************
    **********************************************
    ***********************************************
    ************************************************
    *************************************************
    **************************************************
    ***************************************************
    ****************************************************
    *****************************************************
    ******************************************************
    *******************************************************
    ********************************************************
    *********************************************************
    **********************************************************
   **/
#>
<#+
	void Generate(Manager manager, MappingEntity entity, Dictionary<string, MappingEnum> globalEnumerations)
	{
		var selectedEntities = Context.Entities.Where(e => Context.SelectedEntities.Contains(e.LogicalName)).ToArray();
		var oneNRels= entity.RelationshipsOneToMany.Where(r => selectedEntities.Select(m => m.LogicalName).Contains(r.Type));
		var nOneRels = entity.RelationshipsManyToOne.Where(r => selectedEntities.Select(m => m.LogicalName).Contains(r.Type));
		var nNRels = entity.RelationshipsManyToMany.Where(r => selectedEntities.Select(m => m.LogicalName).Contains(r.Type));
        var entityProfiles = Context.EntityProfilesHeaderSelector;
        var isApplyEntityFilter = Context.EarlyBoundFilteredSelected.Contains(entity.LogicalName);
		var isContract = entityProfiles.EntityProfilesHeaders.Any(e => e.EntityProfiles.Any(filter => filter.LogicalName == entity.LogicalName && filter.IsIncluded));
        var entityFilter = Context.CrmEntityProfiles.FirstOrDefault(e => e.LogicalName == entity.LogicalName);
        var crmEntityName = (entityFilter == null || entityFilter.EntityRename == null)
			? (Context.UseDisplayNames ? entity.FriendlyName : entity.HybridName) : entityFilter.EntityRename;
		var fields = entity.Fields.Where(fieldQ => !fieldQ.Attribute.IsEntityReferenceHelper && fieldQ.IsValidForRead && (entityFilter == null || !isApplyEntityFilter || entity.PrimaryKey.LogicalName == fieldQ.Attribute.LogicalName || entityFilter.Attributes == null || entityFilter.Attributes.Contains(fieldQ.Attribute.LogicalName)));
#>
<#+	if (Context.SplitFiles) {
		manager.StartNewFile(Context.FileName + "_" + crmEntityName + ".cs");
#>
//         Project / File: <#= Context.Namespace #> / <#= Context.FileName + "_" + crmEntityName #>.cs
// File generated by: CRM Code Generator - Ahmed Elsawalhy (Yagasoft.com)

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
<#+ if (Context.IsAddEntityAnnotations) { #>
using System.ComponentModel.DataAnnotations;
<#+ } #>
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Xml.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Reflection;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Query;

namespace <#= Context.Namespace #><#+ if (Context.FileName != "CrmSchema") { #>.<#= Context.FileName #><#+ } #>

{

	#region Entities
<#+ } #>

	#region <#= crmEntityName #>

	/// <summary>
	/// '<#= entity.SchemaName #>'.<br />
	/// <#= entity.DescriptionXmlSafe.Replace("\n","").Replace("\r", " \r\n\t/// ") #>
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("<#= entity.LogicalName #>")<#+ if (entityFilter != null && entityFilter.EntityAnnotations != null) { #>, <#= entityFilter.EntityAnnotations #><#+ } #>]
	public partial class <#= crmEntityName #> : GeneratedEntity<<#= crmEntityName #>.RelationName>
	{
		public <#= crmEntityName #>() : base(EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public <#= crmEntityName #>(string[] keys, object[] values) : base(keys, values, EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public <#= crmEntityName #>(object obj, Type limitingType) : base(obj, limitingType, EntityLogicalName)
		{ }

		public const string DisplayName = <#= ToLiteral(entity.Label) #>;
		public const string SchemaName = "<#= entity.SchemaName #>";
		public const string EntityLogicalName = "<#= entity.LogicalName #>";
		public const int EntityTypeCode = <#= entity.TypeCode #>;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}
<#+ if (entity.AlternateKeys != null && entity.AlternateKeys.Any()) { #>

		#region Alternate Keys

<#+ foreach (var attribute in entity.Fields.Where(e => entity.AlternateKeys.Contains(e.LogicalName))) {
        var attributeName = Context.UseDisplayNames ? (FirstNotNullOrEmpty((entityFilter == null || entityFilter.AttributeRenames == null) ? null : entityFilter.AttributeRenames, attribute.Attribute.LogicalName) ?? attribute.FriendlyName) : attribute.DisplayName;
        var attributeLogicalName = attribute.Attribute.LogicalName;
        var attributeType = attribute.TargetTypeForCrmSvcUtil;
#>
		public void Add<#= attributeName #>Key(<#= attributeType #> value) { KeyAttributes.Add("<#= attributeLogicalName #>", value); }
<#+ } #>

		#endregion
<#+ } #>

<#+ if (Context.JsEarlyBoundEntities.Contains(entity.LogicalName)) { #>

		#region Attributes

		[AttributeLogicalName("<#= entity.PrimaryKey.LogicalName #>")<#+ if (Context.IsAddEntityAnnotations && isContract) { #>, DataMember<#+ } #>]
		public override System.Guid Id
		{
<#+ var primaryAttribute = Context.UseDisplayNames
		? (FirstNotNullOrEmpty((entityFilter == null || entityFilter.AttributeRenames == null) ? null : entityFilter.AttributeRenames, entity.PrimaryKey.LogicalName) ?? entity.PrimaryKey.FriendlyName) : entity.PrimaryKey.DisplayName; #>
			get => (<#= primaryAttribute #> == null || <#= primaryAttribute #> == Guid.Empty) ? base.Id : <#= primaryAttribute #>.GetValueOrDefault();
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("<#= entity.PrimaryKey.LogicalName #>");
                    base.Id = value;
                } else {
				    <#= primaryAttribute #> = value;
                }
			}
		}

<#+	foreach(var attribute in fields)	{
			var isAttributeContract = isContract && entityProfiles.EntityProfilesHeaders.Any(e => e.EntityProfiles.Any(filter => filter.LogicalName == entity.LogicalName && filter.IsIncluded && filter.Attributes != null && filter.Attributes.Contains(attribute.Attribute.LogicalName)));
            var attributeName = Context.UseDisplayNames ? (FirstNotNullOrEmpty((entityFilter == null || entityFilter.AttributeRenames == null) ? null : entityFilter.AttributeRenames, attribute.Attribute.LogicalName) ?? attribute.FriendlyName) : attribute.DisplayName;
            var attributeType = ConvertToContractType(attribute, attributeName);
			attributeType = ((attribute.Attribute != null && attribute.Attribute.IsMultiTyped) && Context.IsUseCustomEntityReference) ? "LookupValue" : attributeType;
			var crmType = attribute.IsStateCode ? "OptionSetValue" : ((attribute.EnumData != null && attribute.EnumData.IsMultiSelect) ? "OptionSetValueCollection" : attribute.TargetTypeForCrmSvcUtil);
            var attributeAnnotations = FirstNotNullOrEmpty((entityFilter == null || entityFilter.AttributeAnnotations == null) ? null : entityFilter.AttributeAnnotations, attribute.Attribute.LogicalName);
#>

<#+ if(attribute.Description != "") { #>
        /// <summary>
        /// <#+ if (attribute.IsRequired) { #>[Required]<#+ } #><#+ if (attribute.MaxLength != null) { #>[MaxLength=<#= attribute.MaxLength #>]<#+ } #><#+ if (attribute.Min != null && attribute.Max != null) { #>[Range(<#=attribute.Min#>, <#=attribute.Max#>)]<#+ } #> 
		/// '<#= attribute.SchemaName #>'.<br />
        /// <#= attribute.DescriptionXmlSafe.Replace("\n","").Replace("\r", " \r\n\t\t/// ") #>
        /// </summary>
<#+ } #>
		[AttributeLogicalName("<#= attribute.Attribute.LogicalName #>")<#+ if (Context.IsAddEntityAnnotations) { #><#+ if (isAttributeContract) { #>, DataMember<#+ } #><#+ if (attribute.IsRequired) { #>, Required<#+ } #><#+ if (attribute.MaxLength != null) { #>, MaxLength(<#= attribute.MaxLength #>)<#+ } #><#+ if (attribute.MaxLength != null && attributeType == "string") { #>, StringLength(<#= attribute.MaxLength #>)<#+ } #><#+ if (attribute.Min != null || attribute.Max != null) { #>, Range(<#= attribute.Min #><#= attribute.Max == null ? "" : ("," + attribute.Max) #>)<#+ } #><#+ if (attribute.ImageData != null && attribute.ImageData.MaxSizeInKb != null && attribute.ImageData.MaxWidth != null && attribute.ImageData.MaxHeight != null) { #>, MaxLength(<#= attribute.ImageData.MaxSizeInKb * 1000 #>), MaxWidth(<#= attribute.ImageData.MaxWidth #>), MaxHeight(<#= attribute.ImageData.MaxHeight #>)<#+ } #><#+ } #><#+ if (attributeAnnotations != null) { #>, <#= attributeAnnotations #><#+ } #>]
<#+ if(attribute.IsDeprecated) { #>
		[Obsolete]
<#+ } #>
<#+ if ((attribute.TargetTypeForCrmSvcUtil.Contains("OptionSetValue") || attribute.IsStateCode) && attribute.EnumData?.IsGlobal == true)
	{#>
		public GlobalEnums.<#= attribute.EnumData.EnumName #>? <#= attribute.SchemaName #>
<#+	}
	else {#>
		public <#= attributeType #> <#= attributeName #>
<#+	}#>
		{
<#+ if (attribute.IsActivityParty) { #>
			get
			{
				var collection = GetAttributeValue<EntityCollection>("<#=attribute.Attribute.LogicalName#>");
<#+ if (Context.IsMakeCrmEntitiesJsonFriendly) { #>
				if (collection == null && backupAttributeCollection != null && backupAttributeCollection.Contains("<#= attribute.Attribute.LogicalName #>"))
				    collection = (EntityCollection) backupAttributeCollection["<#= attribute.Attribute.LogicalName #>"];
<#+ } #>
				if (collection != null && collection.Entities != null) return collection.Entities.Select(entity => entity.ToEntity<ActivityParty>()).ToArray();
				else return null;
			}
			set
			{
<#+ if (Context.IsImplementINotifyProperty) { #>
				OnPropertyChanging();
<#+ } #>
				SetAttributeValue("<#= attribute.Attribute.LogicalName #>", new EntityCollection(new List<Entity>(value)));
<#+ if (Context.IsImplementINotifyProperty) { #>
				OnPropertyChanged();
<#+ } #>
			}
<#+ } else { #>
			get
			{
				var value = GetAttributeValue<<#= crmType #>>("<#= attribute.Attribute.LogicalName #>");
<#+ if (Context.IsMakeCrmEntitiesJsonFriendly) { #>
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("<#= attribute.Attribute.LogicalName #>"))
				    value = (<#= crmType #>) backupAttributeCollection["<#= attribute.Attribute.LogicalName #>"];
<#+ } #>
<#+ if (attribute.EnumData != null && attribute.EnumData.IsMultiSelect) { #>
                return value?.Cast<<#= attributeType.Replace("[]", "") #>>().ToArray();
<#+ } else if(attribute.TargetTypeForCrmSvcUtil.Contains("OptionSetValue") || attribute.IsStateCode) { 
		if (attribute.EnumData.IsGlobal) { #>
			return (GlobalEnums.<#= attribute.EnumData.EnumName #>) value?.Value;
		<#+ } else { #>
			return (<#= attributeType #>) value?.Value;
		<#+ }
	} else if (attribute.TargetTypeForCrmSvcUtil.Contains("Money")) { #>
                return value?.Value;
<#+ } else if (attribute.Attribute != null && attribute.Attribute.IsMultiTyped && Context.IsUseCustomEntityReference) { #>
                return value == null ? null : new LookupValue(value.LogicalName, value.Id);
<#+ } else if (attribute.TargetTypeForCrmSvcUtil.Contains("EntityReference") && !attributeType.Contains("EntityReference")) { #>
                return value?.Id;
<#+ } else { #>
			    return value;
<#+ } #>
			}
<#+ if(attribute.IsValidForUpdate == true || attribute.IsValidForCreate == true || attribute == entity.PrimaryKey) { #>
			set
			{
<#+ if (Context.IsImplementINotifyProperty) { #>
				OnPropertyChanging();
<#+ } #>
<#+ if (attribute.EnumData != null && attribute.EnumData.IsMultiSelect) { #>
                if (value != null) SetAttributeValue("<#= attribute.Attribute.LogicalName #>", new OptionSetValueCollection(value.Select(e => new OptionSetValue((int)e)).ToArray()));
                else
	<#+ } #>
<#+ else if(attribute.TargetTypeForCrmSvcUtil.Contains("OptionSetValue") || attribute.IsStateCode) { #>
                if (value != null) SetAttributeValue("<#= attribute.Attribute.LogicalName #>", new OptionSetValue((int) value.Value));
                else
	<#+ } #>
<#+ else if (attribute.TargetTypeForCrmSvcUtil.Contains("Money")) { #>
                if (value != null) SetAttributeValue("<#= attribute.Attribute.LogicalName #>", new Money(value.Value));
                else
	<#+ } #>
<#+ else if ((attribute.Attribute != null && attribute.Attribute.IsMultiTyped) && Context.IsUseCustomEntityReference) { #>
                if (value != null) SetAttributeValue("<#= attribute.Attribute.LogicalName #>", new EntityReference(value.EntityName, value.Id));
                else
	<#+ } #>
<#+ else if (attribute.TargetTypeForCrmSvcUtil.Contains("EntityReference") && !attributeType.Contains("EntityReference")) { #>
                if (value != null) SetAttributeValue("<#= attribute.Attribute.LogicalName #>", new EntityReference("<#= (attribute.LookupData == null || attribute.LookupData.LookupSingleType == null) ? "" : attribute.LookupData.LookupSingleType #>", value.Value));
                else
	<#+ } #>
<#+ if(attribute == entity.PrimaryKey) { #>
                if (value != null)
	<#+ } #>
                SetAttributeValue("<#= attribute.Attribute.LogicalName #>", value);
<#+ if(attribute == entity.PrimaryKey) { #>
				if (value != null) base.Id = value.Value;
				else Id = System.Guid.Empty;
<#+ } #>
<#+ if (Context.IsImplementINotifyProperty) { #>
				OnPropertyChanged();
<#+ } #>
			}
<#+ } #>
<#+ } #>
		}

<#+ if (Context.IsGenerateAlternateKeys) {
		var lookupData = attribute.LookupData;
		if (lookupData != null && lookupData.LookupKeys != null) {
			var lookupEntity = lookupData.LookupKeys.Entity;
			var lookupEntityName = Context.UseDisplayNames ? (lookupEntity == null ? null : lookupEntity.FriendlyName) : (lookupEntity == null ? null : lookupEntity.HybridName);
#>
		public <#= Context.IsUseCustomTypeForAltKeys ? lookupEntityName + ".LookupKeys" : "EntityReference" #> <#= attributeName #><#= Context.IsUseCustomTypeForAltKeys ? lookupEntityName + "Keys" : "Reference" #> => <#= attributeName #> == null ? null : <#+ if (Context.IsUseCustomTypeForAltKeys) { #>new <#= lookupEntityName #>.LookupKeys(<#+ } #>GetAttributeValue<<#= attribute.TargetTypeForCrmSvcUtil #>>("<#= attribute.Attribute.LogicalName #>")<#+ if (Context.IsUseCustomTypeForAltKeys) { #>)<#+ } #>;

<#+ } #>
<#+ } #>

<#+ if (attribute.TargetTypeForCrmSvcUtil.Contains("EntityReference")) { #>
<#+ if (Context.IsAddEntityAnnotations && isAttributeContract) { #>
        [DataMember]
<#+ } #>
        public string <#= attributeName #>Name
        {
		    get
		    {
				var value = GetAttributeValue<<#= attribute.TargetTypeForCrmSvcUtil #>>("<#= attribute.Attribute.LogicalName #>");
<#+ if (Context.IsMakeCrmEntitiesJsonFriendly) { #>
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("<#= attribute.Attribute.LogicalName #>"))
				    value = (<#= attribute.TargetTypeForCrmSvcUtil #>) backupAttributeCollection["<#= attribute.Attribute.LogicalName #>"];
<#+ } #>
                return value?.Name;
            }
        }

<#+ if (Context.LookupLabelsEntities != null && Context.LookupLabelsEntities.Contains(entity.LogicalName)) { #>
<#+ if (Context.IsAddEntityAnnotations && isAttributeContract) { #>
        [DataMember]
<#+ } #>
<#+ if (attribute.LookupData != null && attribute.LookupData != null && attribute.LookupData.LookupLabel != null && !string.IsNullOrEmpty(((attribute.LookupData == null) ? null : attribute.LookupData.LookupLabel.LabelFieldNames))) { #>
		[Label("<#= ((attribute.LookupData == null) ? "" : attribute.LookupData.LookupLabel.LabelFieldNames) #>", "<#= ((attribute.LookupData == null) ? "" : attribute.LookupData.LookupLabel.LogicalName) #>", "<#= ((attribute.LookupData == null) ? "" : attribute.LookupData.LookupLabel.IdFieldName) #>", "<#=attribute.Attribute.LogicalName#>")]
<#+ } #>
        public <#= Context.IsUseCustomDictionary ? "List<OptionsetLanguageLabel>" : "IDictionary<int, string>" #> <#= attributeName #>Labels { get; set; }

<#+ } #>
<#+ } #>
<#+ if (Context.OptionsetLabelsEntities != null && Context.OptionsetLabelsEntities.Contains(entity.LogicalName) && (attribute.TargetTypeForCrmSvcUtil.Contains("OptionSetValue") || attribute.TargetTypeForCrmSvcUtil.Contains("bool?") || attribute.IsStateCode) && entity.Enums.Any()) { #>
<#+     var enm = entity.Enums.FirstOrDefault(field => field.LogicalName == attribute.LogicalName);
		if (enm != null && enm.Items.Any())
		{
			var languages = enm.Items.First().LocalizedLabels.Select(label => label.LanguageCode);
 #>
<#+ if (Context.IsAddEntityAnnotations && isAttributeContract) { #>
        [DataMember]
<#+ } #>
        public <#= Context.IsUseCustomDictionary ? "List<OptionsetLanguageLabel>" : "IDictionary<int, string>" #> <#= attributeName #>Labels
        {
		    get
		    {
                var value = GetAttributeValue<<#= crmType #>>("<#= attribute.Attribute.LogicalName #>");
<#+ if (Context.IsMakeCrmEntitiesJsonFriendly) { #>
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("<#= attribute.Attribute.LogicalName #>"))
				    value = (<#= crmType #>) backupAttributeCollection["<#= attribute.Attribute.LogicalName #>"];
<#+ } #>
                if (value == null) return null;
                return new <#= Context.IsUseCustomDictionary ? "List<OptionsetLanguageLabel>" : "Dictionary<int, string>" #>
                        {
<#+ foreach(var language in languages) { #>
                            <#= Context.IsUseCustomDictionary ? "new OptionsetLanguageLabel" : "" #> { <#= Context.IsUseCustomDictionary ? "LanguageCode = " : "" #><#= language #>, <#= Context.IsUseCustomDictionary ? "OptionsetLabel = " : "" #>Enums.GetLabel("<#= attribute.Attribute.LogicalName #>", <#= attribute.TargetTypeForCrmSvcUtil.Contains("bool?") ? "(bool) value ? 1 : 0" : "value.Value" #>, <#= language #>) },
<#+ } #>
                        };
            }
        }

<#+ } #>
<#+ } #>
<#+ } #>
		#endregion

		#region Relationships

<#+ //BEGIN// 1:N Relationships  #>
<#+	
		var relationProperties = "\t\tpublic override IDictionary<string, object[]> RelationProperties { get {\r\n\t\t\tif (relationProperties != null) return relationProperties;\r\n\t\t\trelationProperties = new Dictionary<string, object[]>();\r\n";
		var relationEnum = "\t\tpublic static class RelationNames {\r\n";
        foreach(var attribute in oneNRels.Where(e => entityFilter == null || !isApplyEntityFilter || entityFilter.OneToN == null || entityFilter.OneToN.Contains(e.SchemaName)))	{
			var isAttributeContract = entityProfiles.EntityProfilesHeaders.Any(e => e.EntityProfiles.Any(filter => filter.LogicalName == entity.LogicalName && filter.IsIncluded && filter.OneToN != null && filter.OneToN.Contains(attribute.SchemaName)));
			var profileTemp = Context.CrmEntityProfiles.FirstOrDefault(e => e.LogicalName == attribute.ToEntity.LogicalName);
			var crmEntityNameTemp = (profileTemp == null || profileTemp.EntityRename == null)
				? (Context.UseDisplayNames ? attribute.ToEntity.FriendlyName : attribute.ToEntity.HybridName) : profileTemp.EntityRename;
			var relationName = FirstNotNullOrEmpty((entityFilter == null || entityFilter.OneToNRenames == null) ? null : entityFilter.OneToNRenames, attribute.SchemaName) ?? attribute.FriendlyName;
			relationProperties += "\t\t\trelationProperties[\"" + relationName + "\"] = new object[] { " +
				"\"" + relationName + "\", " +
				"\"" + attribute.ToEntity.LogicalName + "\", " +
				"\"" + entity.LogicalName + "\", " +
				"\"" + attribute.ToField.LogicalName + "\", " +
				"\"" + entity.PrimaryKey.LogicalName + "\", " +
				"\"" + entity.PrimaryKey.LogicalName + "\", " +
				"\"" + entity.PrimaryKey.LogicalName + "\", " +
				"\"" + attribute.SchemaName + "\", " +
				"typeof (" + crmEntityNameTemp + "[])" +
				" };\r\n";
			relationEnum += "\t\t\tpublic static RelationName " + relationName + " = new RelationName(\"" +  relationName+ "\");\r\n";
#>
		
		/// <summary>
		/// 1:N, '<#= attribute.SchemaName #>'
		/// </summary>
<#+ if(attribute.SchemaName == "calendar_calendar_rules" || attribute.SchemaName == "service_calendar_rules") { #>
		[AttributeLogicalName("calendarrules")]
		public CalendarRule[] CalendarRules
		{
			get
			{
				var collection = GetAttributeValue<EntityCollection>("calendarrules");
				if (collection != null && collection.Entities != null) return System.Linq.Enumerable.Cast<CalendarRule>(collection.Entities).ToArray();
				else return null;
			}
			
			set
			{
<#+ if (Context.IsImplementINotifyProperty) { #>
				OnPropertyChanging();
<#+ } #>
				if (RelatedEntities.IsReadOnly) RelatedEntities.GetType().GetProperty("IsReadOnly").SetValue(RelatedEntities, false);
    			SetAttributeValue("calendarrules", new EntityCollection(new List<Entity>(value)));
<#+ if (Context.IsImplementINotifyProperty) { #>
				OnPropertyChanged();
<#+ } #>
			}
		}
<#+ } else { #>
		[RelationshipSchemaName("<#=attribute.SchemaName#>"<#=attribute.EntityRole=="null" ? "" :", " + attribute.EntityRole#>)<#+ if (Context.IsAddEntityAnnotations && isAttributeContract) { #>, DataMember<#+ } #>]
		public <#= crmEntityNameTemp #>[] <#= relationName #>
		{
			get => GetRelatedEntities<<#= crmEntityNameTemp #>>("<#= attribute.SchemaName #>", <#= attribute.EntityRole #>)?.ToArray();
			set
			{
<#+ if (Context.IsImplementINotifyProperty) { #>
				OnPropertyChanging();
<#+ } #>
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("<#= attribute.SchemaName #>", <#= attribute.EntityRole #>, value);
<#+ if (Context.IsImplementINotifyProperty) { #>
				OnPropertyChanged();
<#+ } #>
			}
		}
<#+ if (Context.IsGenerateLoadPerRelation) { #>

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch.
		/// </summary>
		public <#=crmEntityNameTemp#>[] Load<#= relationName #>(IOrganizationService service, XrmServiceContext context,
			int recordCountLimit = -1, int page = -1, FilterExpression filter = null, params string[] attributes)
		{
			if (context.MergeOption == MergeOption.NoTracking) {
				throw new Exception("Set 'MergeOption' to anything other than 'NoTracking' in the context before loading relationships.");
			}
            var result = GeneratorHelpers.LoadRelation(this, service, "<#=attribute.ToEntity.LogicalName#>", LogicalName, "<#=attribute.ToField.LogicalName#>", "<#=entity.PrimaryKey.LogicalName#>", "<#=entity.PrimaryKey.LogicalName#>", "<#=entity.PrimaryKey.LogicalName#>",
				recordCountLimit, page, filter, attributes: attributes).Select(entity => entity.ToEntity<<#=crmEntityNameTemp#>>()).ToArray();
			if (result.Length <= 0) return null;
			Array.ForEach(result,
				entity =>
			    {
				    var alreadyTracked = context.GetAttachedEntities().FirstOrDefault(attached => attached.Id == entity.Id);
				    if (alreadyTracked == null) { context.Attach(entity); alreadyTracked = entity; }
					try { context.AttachLink(this, new Relationship("<#= attribute.SchemaName #>"), alreadyTracked); } catch { }
			    });
			if (<#= relationName #> == null || <#= relationName #>.Length != result.Length) {
				throw new Exception("Set 'MergeOption' to anything other than 'NoTracking' in the context before loading relationships.");
			}
            return result;
		}

		public <#= crmEntityNameTemp #>[] Load<#= relationName #>(IOrganizationService service, params string[] attributes)
		{
			return Load<#= relationName #>(service, -1, -1, null, false, attributes);
		}

		public <#= crmEntityNameTemp #>[] Load<#= relationName #>(IOrganizationService service, bool isDeferred, params string[] attributes)
		{
			return Load<#= relationName #>(service, -1, -1, null, isDeferred, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public <#= crmEntityNameTemp #>[] Load<#= relationName #>(IOrganizationService service, int recordCountLimit, int page = -1,
			FilterExpression filter = null, bool isDeferred = false, params string[] attributes)
		{
			if (RelatedEntities.IsReadOnly)
				throw new Exception("Relationship collection is ready only. The context that loaded this entity from CRM must be passed as a parameter, " +
									"or set 'MergeOption' to 'NoTracking' in the context before fetching this entity using LINQ.");
			<#=crmEntityNameTemp#>[] resultArray = null;
			var queryActionObject = new QueryAction(GeneratorHelpers.GetLoadRelationQuery(this, service, "<#=attribute.ToEntity.LogicalName#>", LogicalName, "<#=attribute.ToField.LogicalName#>", "<#=entity.PrimaryKey.LogicalName#>", "<#=entity.PrimaryKey.LogicalName#>", "<#=entity.PrimaryKey.LogicalName#>",
				recordCountLimit, page, filter: filter, attributes: attributes));
			var queryAction = queryActionObject.Action =
				result => {
					var response = result as RetrieveMultipleResponse;
					resultArray = response == null ? resultArray = ((List<Entity>) result).Select(entityQ => entityQ.ToEntity<<#=crmEntityNameTemp#>>()).ToArray()
	    				: response.EntityCollection.Entities.Select(entityQ => entityQ.ToEntity<<#=crmEntityNameTemp#>>()).ToArray();
					DeferredQueriesList.Remove(queryActionObject);
					if (resultArray.Length <= 0) return;
					if (<#= relationName #> == null) { <#= relationName #> = resultArray; return; }
					<#= relationName #> = <#= relationName #>.Union(resultArray).Distinct<<#= crmEntityNameTemp #>>(new EntityComparer()).ToArray();
				};
			if (isDeferred) DeferredQueriesList.Add(queryActionObject);
			else queryAction.Invoke(GeneratorHelpers.LoadRelation(service, queryActionObject.Query, recordCountLimit, page));
			return resultArray;
		}
<#+ } #>
<#+ } #>
<#+ } #>
<#+
//END// 1:N Realationships

//BEGIN// N:1 Realationships 
	foreach(var attribute in nOneRels.Where(e => entityFilter == null || !isApplyEntityFilter || entityFilter.NToOne == null || entityFilter.NToOne.Contains(e.SchemaName)))	{
			var isAttributeContract = entityProfiles.EntityProfilesHeaders.Any(e => e.EntityProfiles.Any(filter => filter.LogicalName == entity.LogicalName && filter.IsIncluded && filter.NToOne != null && filter.NToOne.Contains(attribute.SchemaName)));
			var profileTemp = Context.CrmEntityProfiles.FirstOrDefault(e => e.LogicalName == attribute.ToEntity.LogicalName);
			var crmEntityNameTemp = (profileTemp == null || profileTemp.EntityRename == null)
				? (Context.UseDisplayNames ? attribute.ToEntity.FriendlyName : attribute.ToEntity.HybridName) : profileTemp.EntityRename;
			var relationName = FirstNotNullOrEmpty((entityFilter == null || entityFilter.NToOneRenames == null) ? null : entityFilter.NToOneRenames, attribute.SchemaName) ?? attribute.FriendlyName;
			relationProperties += "\t\t\trelationProperties[\"" + relationName + "\"] = new object[] { " +
				"\"" + relationName + "\", " +
				"\"" + attribute.ToEntity.LogicalName + "\", " +
				"\"" + entity.LogicalName + "\", " +
				"\"" + attribute.ToEntity.PrimaryKey.LogicalName + "\", " +
				"\"" + attribute.FromField.LogicalName + "\", " +
				"\"" + entity.PrimaryKey.LogicalName + "\", " +
				"\"" + entity.PrimaryKey.LogicalName + "\", " +
				"\"" + attribute.SchemaName + "\", " +
				"typeof (" + crmEntityNameTemp + ")" +
				" };\r\n";
			relationEnum += "\t\t\tpublic static RelationName " + relationName + " = new RelationName(\"" +  relationName+ "\");\r\n";
#>
		
		/// <summary>
		/// N:1, '<#=attribute.SchemaName#>'
		/// </summary>
		[RelationshipSchemaName("<#=attribute.SchemaName#>"<#=attribute.EntityRole=="null" ? "" :", " + attribute.EntityRole#>), AttributeLogicalName("<#=attribute.LogicalName#>")<#+ if (Context.IsAddEntityAnnotations && isAttributeContract) { #>, DataMember<#+ } #>]
		public <#=crmEntityNameTemp#> <#= relationName #>
		{
			get => GetRelatedEntity<<#= crmEntityNameTemp #>>("<#= attribute.SchemaName #>", <#= attribute.EntityRole #>);
<#+ if(attribute.Property != null) { #>
			set
			{
<#+ if (Context.IsImplementINotifyProperty) { #>
				OnPropertyChanging();
<#+ } #>
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<<#=crmEntityNameTemp#>>("<#=attribute.SchemaName#>", <#=attribute.EntityRole#>, value);
<#+ if (Context.IsImplementINotifyProperty) { #>
				OnPropertyChanged();
<#+ } #>
			}
<#+ } #>
		}
<#+ if (attribute.Property != null) { #>
<#+ if (Context.IsGenerateLoadPerRelation) { #>

		/// <summary>
		/// Fetch the record related to this entity on this relationship.
        /// To specify columns to fetch, the attributes param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch.
		/// </summary>
		public <#=crmEntityNameTemp#> Load<#= relationName #>(IOrganizationService service, XrmServiceContext context, params string[] attributes)
		{
			if (context.MergeOption == MergeOption.NoTracking) {
				throw new Exception("Set 'MergeOption' to anything other than 'NoTracking' in the context before loading relationships.");
			}
            var result = GeneratorHelpers.LoadRelation(this, service, "<#=attribute.ToEntity.LogicalName#>", LogicalName, "<#=attribute.ToEntity.PrimaryKey.LogicalName#>", "<#=attribute.FromField.LogicalName#>", "<#=entity.PrimaryKey.LogicalName#>", "<#=entity.PrimaryKey.LogicalName#>",
				-1, -1, null, attributes: attributes).FirstOrDefault();
			if (result == null) { return null; }
			var alreadyTracked = context.GetAttachedEntities().FirstOrDefault(attached => attached.Id == result.Id);
			if (alreadyTracked == null) { context.Attach(result); alreadyTracked = result; }
			try { context.AttachLink(this, new Relationship("<#= attribute.SchemaName #>"), alreadyTracked); } catch { }
			if (<#= relationName #> == null || <#= relationName #>.Id != result.Id) {
				throw new Exception("Set 'MergeOption' to anything other than 'NoTracking' in the context before loading relationships.");
			}
            return result.ToEntity<<#=crmEntityNameTemp#>>();
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship.
        /// To specify columns to fetch, the attributes param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public <#=crmEntityNameTemp#> Load<#= relationName #>(IOrganizationService service, bool isDeferred = false, params string[] attributes)
		{
			if (RelatedEntities.IsReadOnly) {
				throw new Exception("Relationship collection is ready only. The context that loaded this entity from CRM must be passed as a parameter, " +
					"or set 'MergeOption' to 'NoTracking' in the context before fetching this entity using LINQ.");
			}
			<#=crmEntityNameTemp#> result = null;
			var queryActionObject = new QueryAction(GeneratorHelpers.GetLoadRelationQuery(this, service, "<#=attribute.ToEntity.LogicalName#>", LogicalName, "<#=attribute.ToEntity.PrimaryKey.LogicalName#>", "<#=attribute.FromField.LogicalName#>", "<#=entity.PrimaryKey.LogicalName#>", "<#=entity.PrimaryKey.LogicalName#>",
					-1, -1, filter: null, attributes: attributes));
			var queryAction = queryActionObject.Action =
				resultQ => {
					var response = resultQ as RetrieveMultipleResponse;
					var resultTemp = response == null ? ((List<Entity>) resultQ).FirstOrDefault()
						: response.EntityCollection.Entities.FirstOrDefault();
					DeferredQueriesList.Remove(queryActionObject);
					<#= relationName #> = result = (resultTemp == null ? null : resultTemp.ToEntity<<#=crmEntityNameTemp#>>());
				};
			if (isDeferred) DeferredQueriesList.Add(queryActionObject);
			else queryAction.Invoke(GeneratorHelpers.LoadRelation(service, queryActionObject.Query));
			return result;
		}
<#+ } #>
<#+ } #>
<#+ } //END// N:1 Relationships 

//BEGIN// N:N Relationships 
	foreach(var attribute in nNRels.Where(e => entityFilter == null || !isApplyEntityFilter || entityFilter.NToN == null || entityFilter.NToN.Contains(e.SchemaName)))	{
			var isAttributeContract = entityProfiles.EntityProfilesHeaders.Any(e => e.EntityProfiles.Any(filter => filter.LogicalName == entity.LogicalName && filter.IsIncluded && filter.NToN != null && filter.NToN.Contains(attribute.SchemaName)));
			var profileTemp = Context.CrmEntityProfiles.FirstOrDefault(e => e.LogicalName == attribute.ToEntity.LogicalName);
			var crmEntityNameTemp = (profileTemp == null || profileTemp.EntityRename == null)
				? (Context.UseDisplayNames ? attribute.ToEntity.FriendlyName : attribute.ToEntity.HybridName) : profileTemp.EntityRename;
			var relationName = (FirstNotNullOrEmpty((entityFilter == null || entityFilter.NToNRenames == null) ? null : entityFilter.NToNRenames, attribute.SchemaName) ?? attribute.FriendlyName)
				+ (nNRels.Count(r => r.SchemaName == attribute.SchemaName) > 1 ? (attribute.EntityRole == "null" ? "_1" : "_" + attribute.EntityRole.Split('.').Last()) : "");

			if (attribute.IntersectingEntity != null)
			{
				relationProperties += (attribute.EntityRole.Split('.').Last() == "Referencing")
					? "\t\t\trelationProperties[\"" + relationName + "\"] = new object[] { " +
						"\"" + relationName + "\", " +
						"\"" + entity.LogicalName + "\", " +
						"\"" + attribute.IntersectingEntity.LogicalName + "\", " +
						"\"" + entity.PrimaryKey.LogicalName + "\", " +
						"\"" + attribute.Attribute.FromKey + "\", " +
						"\"" + attribute.ToEntity.PrimaryKey.LogicalName + "\", " +
						"\"" + attribute.Attribute.ToKey + "\", " +
						"\"" + attribute.SchemaName + "\", " +
						"typeof (" + crmEntityNameTemp + "[])" +
						" };\r\n"
					: "\t\t\trelationProperties[\"" + relationName + "\"] = new object[] { " +
						"\"" + relationName + "\", " +
						"\"" + attribute.ToEntity.LogicalName + "\", " +
						"\"" + attribute.IntersectingEntity.LogicalName + "\", " +
						"\"" + attribute.ToEntity.PrimaryKey.LogicalName + "\", " +
						"\"" + attribute.Attribute.ToKey + "\", " +
						"\"" + entity.PrimaryKey.LogicalName + "\", " +
						"\"" + attribute.Attribute.FromKey + "\", " +
						"\"" + attribute.SchemaName + "\", " +
						"typeof (" + crmEntityNameTemp + "[])" +
						" };\r\n";
				relationEnum += "\t\t\tpublic static RelationName " + relationName + " = new RelationName(\"" +  relationName+ "\");\r\n";
			}
#>
		
		/// <summary>
		/// N:N, '<#=attribute.SchemaName#>'
		/// </summary>
		[RelationshipSchemaName("<#=attribute.SchemaName#>"<#=attribute.EntityRole=="null" ? "" :", " + attribute.EntityRole#>)<#+ if (Context.IsAddEntityAnnotations && isAttributeContract) { #>, DataMember<#+ } #>]
		public <#=crmEntityNameTemp#>[] <#= relationName #>

		{
			get => GetRelatedEntities<<#= crmEntityNameTemp #>>("<#= attribute.SchemaName #>", <#= attribute.EntityRole #>)?.ToArray();
			set
			{
<#+ if (Context.IsImplementINotifyProperty) { #>
				OnPropertyChanging();
<#+ } #>
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("<#=attribute.SchemaName#>", <#=attribute.EntityRole#>, value);
<#+ if (Context.IsImplementINotifyProperty) { #>
				OnPropertyChanged();
<#+ } #>
			}
		}
<#+ if (attribute.IntersectingEntity != null && selectedEntities.Select(m => m.LogicalName).Contains(attribute.IntersectingEntity.LogicalName)) { #>
<#+ if (Context.IsGenerateLoadPerRelation) { #>

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the attributes param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch.
		/// </summary>
		public <#=crmEntityNameTemp#>[] Load<#= relationName #>(IOrganizationService service, XrmServiceContext context,
			int recordCountLimit = -1, int page = -1, FilterExpression filter = null, params string[] attributes)
		{
			if (context.MergeOption == MergeOption.NoTracking) {
				throw new Exception("Set 'MergeOption' to anything other than 'NoTracking' in the context before loading relationships.");
			}
<#+ if (attribute.EntityRole.Split('.').Last() == "Referencing") { #>
            var result = GeneratorHelpers.LoadRelation(this, service, "<#= entity.LogicalName #>", "<#=attribute.IntersectingEntity.LogicalName#>", "<#= entity.PrimaryKey.LogicalName #>", "<#= attribute.Attribute.FromKey #>", "<#= attribute.ToEntity.PrimaryKey.LogicalName #>", "<#= attribute.Attribute.ToKey #>", recordCountLimit, page, filter, attributes: attributes).Select(entity => entity.ToEntity<<#= crmEntityNameTemp #>>()).ToArray();
<#+ } else { #>
            var result = GeneratorHelpers.LoadRelation(this, service, "<#= attribute.ToEntity.LogicalName #>", "<#=attribute.IntersectingEntity.LogicalName#>", "<#= attribute.ToEntity.PrimaryKey.LogicalName #>", "<#= attribute.Attribute.ToKey #>", "<#=entity.PrimaryKey.LogicalName#>", "<#= attribute.Attribute.FromKey #>", recordCountLimit, page, filter, attributes: attributes).Select(entity => entity.ToEntity<<#= crmEntityNameTemp #>>()).ToArray();
<#+ } #>
			if (result.Length <= 0) return null;
			Array.ForEach(result,
				entity =>
			    {
				    var alreadyTracked = context.GetAttachedEntities().FirstOrDefault(attached => attached.Id == entity.Id);
				    if (alreadyTracked == null) { context.Attach(entity); alreadyTracked = entity; }
					try { context.AttachLink(this, new Relationship("<#= attribute.SchemaName #>"), alreadyTracked); } catch { }
			    });
			if (<#= relationName #> == null || <#= relationName #>.Length != result.Length) {
				throw new Exception("Set 'MergeOption' to anything other than 'NoTracking' in the context before loading relationships.");
			}
            return result;
		}

		public <#= crmEntityNameTemp #>[] Load<#= relationName #>(IOrganizationService service, params string[] attributes)
		{
			return Load<#= relationName #>(service, -1, -1, null, false, attributes);
		}

		public <#= crmEntityNameTemp #>[] Load<#= relationName #>(IOrganizationService service, bool isDeferred, params string[] attributes)
		{
			return Load<#= relationName #>(service, -1, -1, null, isDeferred, attributes);
		}
		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the attributes param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public <#= crmEntityNameTemp #>[] Load<#= relationName #>(IOrganizationService service, int recordCountLimit, int page = -1,
			FilterExpression filter = null, bool isDeferred = false, params string[] attributes)
		{
			if (RelatedEntities.IsReadOnly) {
				throw new Exception("Relationship collection is ready only. The context that loaded this entity from CRM must be passed as a parameter, " +
					"or set 'MergeOption' to 'NoTracking' in the context before fetching this entity using LINQ.");
			}
			<#=crmEntityNameTemp#>[] resultArray = null;
<#+ if (attribute.EntityRole.Split('.').Last() == "Referencing") { #>
			var queryActionObject = new QueryAction(GeneratorHelpers.GetLoadRelationQuery(this, service, "<#= entity.LogicalName #>", "<#= attribute.IntersectingEntity.LogicalName #>", "<#= entity.PrimaryKey.LogicalName #>", "<#= attribute.Attribute.FromKey #>", "<#= attribute.ToEntity.PrimaryKey.LogicalName #>", "<#= attribute.Attribute.ToKey #>", recordCountLimit, page, filter: filter, attributes: attributes));
<#+ } else { #>
			var queryActionObject = new QueryAction(GeneratorHelpers.GetLoadRelationQuery(this, service, "<#= attribute.ToEntity.LogicalName #>", "<#= attribute.IntersectingEntity.LogicalName #>", "<#= attribute.ToEntity.PrimaryKey.LogicalName #>", "<#= attribute.Attribute.ToKey #>", "<#=entity.PrimaryKey.LogicalName#>", "<#= attribute.Attribute.FromKey #>", recordCountLimit, page, filter: filter, attributes: attributes));
<#+ } #>
			var queryAction = queryActionObject.Action =
			    result => {
				    var response = result as RetrieveMultipleResponse;
					resultArray = response == null ? resultArray = ((List<Entity>) result).Select(entityQ => entityQ.ToEntity<<#=crmEntityNameTemp#>>()).ToArray()
	    				: response.EntityCollection.Entities.Select(entityQ => entityQ.ToEntity<<#=crmEntityNameTemp#>>()).ToArray();
				    DeferredQueriesList.Remove(queryActionObject);
				    if (resultArray.Length <= 0) return;
				    if (<#= relationName #> == null) { <#= relationName #> = resultArray; return; }
				    <#= relationName #> = <#= relationName #>.Union(resultArray).Distinct<<#= crmEntityNameTemp #>>(new EntityComparer()).ToArray();
			    };
			if (isDeferred) DeferredQueriesList.Add(queryActionObject);
			else queryAction.Invoke(GeneratorHelpers.LoadRelation(service, queryActionObject.Query, recordCountLimit, page));
			return resultArray;
		}
<#+ } #>
<#+ } #>
<#+ //END// N:N Realationships  #>
<#+ }
	relationProperties += "\t\t\treturn relationProperties; } }";
	relationEnum += "\t\t}";
#>
		
<#= relationEnum #>

<#= relationProperties #>

		#endregion

		/// <inheritdoc/>
		public <#= crmEntityName #>(object obj) : base(obj, EntityLogicalName)
		{
            foreach (var p in obj.GetType().GetProperties())
            {
                var value = p.GetValue(obj, null);
                if (p.PropertyType == typeof(Guid))
                {
                    base.Id = (Guid)value;
<#+ if(entity.PrimaryKey.IsValidForCreate) { #>
                    Attributes["<#=entity.PrimaryKey.LogicalName#>"] = base.Id;
<#+ } #>
                }
                else if (p.Name == "FormattedValues")
                {
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}
<#+ } #>

<#+ if (Context.JsEarlyBoundEntities.Contains(entity.LogicalName) || Context.PluginMetadataEntities.Contains(entity.LogicalName)) { #>

		#region Label/value pairs

<#+ foreach(var enm in entity.Enums.Where(e => fields.Any(f => f.LogicalName == e.LogicalName))) {
        var attribute = entity.Fields.FirstOrDefault(field => field.LogicalName == enm.LogicalName);
        var attributeName = Context.UseDisplayNames ? (FirstNotNullOrEmpty((entityFilter == null || entityFilter.AttributeRenames == null) ? null : entityFilter.AttributeRenames, attribute == null ? "" : attribute.Attribute.LogicalName) ?? enm.FriendlyName) : enm.DisplayName;
		
		if (enm.IsGlobal) {
			globalEnumerations[enm.EnumName] = enm;
			continue;
		}
 #>
		public enum <#= attributeName #>Enum
		{
<#+ foreach(var item in enm.Items) { #>
			<#+ if (Context.IsAddEntityAnnotations && isContract) { #>[EnumMember]<#+ } #><#= item.Name #> = <#= item.Value #>,
<#+ } #>
		}
	
<#+ } #>
		#endregion

<#+ } #>
		#region Metadata

<#+ if ((Context.OptionsetLabelsEntities != null && Context.OptionsetLabelsEntities.Contains(entity.LogicalName)) || Context.PluginMetadataEntities.Contains(entity.LogicalName)) { #>
		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}
<#+ if (Context.IsGenerateEnumNames) { #>

			#region Logical names

			public static class Names
			{
<#+ foreach(var enm in entity.Enums.Where(e => fields.Any(f => f.LogicalName == e.LogicalName))) {
        var attribute = entity.Fields.FirstOrDefault(field => field.LogicalName == enm.LogicalName);

		if (entityFilter != null && !entityFilter.Attributes.Contains(attribute.Attribute.LogicalName)) {
			continue;
		}

        var attributeName = Context.UseDisplayNames ? (FirstNotNullOrEmpty((entityFilter == null || entityFilter.AttributeRenames == null) ? null : entityFilter.AttributeRenames, attribute == null ? "" : attribute.Attribute.LogicalName) ?? enm.FriendlyName) : enm.DisplayName;
#>
				public const string <#= attributeName #> = "<#= enm.LogicalName #>";
<#+ } #>
			}

			#endregion
<#+ } #>
<#+ if (Context.IsGenerateEnumLabels) { #>

			#region Labels

			public static class Labels
			{
<#+foreach(var enm in entity.Enums.Where(e => fields.Any(f => f.LogicalName == e.LogicalName))) {
        var attribute = entity.Fields.FirstOrDefault(field => field.LogicalName == enm.LogicalName);

		if (entityFilter != null && !entityFilter.Attributes.Contains(attribute.Attribute.LogicalName)) {
			continue;
		}

        var attributeName = Context.UseDisplayNames ? (FirstNotNullOrEmpty((entityFilter == null || entityFilter.AttributeRenames == null) ? null : entityFilter.AttributeRenames, attribute == null ? "" : attribute.Attribute.LogicalName) ?? enm.FriendlyName) : enm.DisplayName;
        var languagesCreated = new List<int>();
#>
				public static IDictionary<int, IDictionary<int, string>> <#= attributeName #> { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
<#+ foreach(var grp in enm.Items.SelectMany(e => e.LocalizedLabels).GroupBy(e => e.LanguageCode)) { #>
<#+		if (!languagesCreated.Contains(grp.Key)) {
			languagesCreated.Add(grp.Key);
#>
						{ <#= grp.Key #>,
							new Dictionary<int, string>
							{
<#+ foreach(var item in enm.Items) {
		var locLabelTemp = item.LocalizedLabels.FirstOrDefault(e => e.LanguageCode == grp.Key); #>
								{<#= item.Value #>, <#= ToLiteral(locLabelTemp == null ? null : locLabelTemp.Label) #>},
<#+ } #>
							}
						},
<#+ } #>
<#+ } #>
					};

<#+ } #>
			}

			#endregion
<#+ } #>
		}

		#endregion
<#+ } #>

<#+ if (Context.PluginMetadataEntities.Contains(entity.LogicalName)) { #>

		#region Fields

		public static class Fields
		{
			#region Logical names

<#+ var primaryAttribute = Context.UseDisplayNames
		? (FirstNotNullOrEmpty((entityFilter == null || entityFilter.AttributeRenames == null) ? null : entityFilter.AttributeRenames, entity.PrimaryKey.LogicalName) ?? entity.PrimaryKey.FriendlyName) : entity.PrimaryKey.DisplayName;
	if (!fields.Any(e => e.Attribute.LogicalName == entity.PrimaryKey.LogicalName)) { #>
			public const string <#= primaryAttribute #> = "<#= entity.PrimaryKey.LogicalName #>";
<#+ } #>
<#+ foreach(var f in fields) { #>
			public const string <#= Context.UseDisplayNames ? (FirstNotNullOrEmpty((entityFilter == null || entityFilter.AttributeRenames == null) ? null : entityFilter.AttributeRenames, f.Attribute.LogicalName) ?? f.FriendlyName) : f.DisplayName #> = "<#=f.Attribute.LogicalName#>";
<#+ } #>

			#endregion
<#+ if (Context.IsGenerateFieldSchemaNames) { #>

			#region Schema names

			public static class Schema
			{
<#+ if (!fields.Any(e => e.Attribute.LogicalName == entity.PrimaryKey.LogicalName)) { #>
				public const string <#= primaryAttribute #> = "<#= entity.PrimaryKey.SchemaName #>";
<#+ } #>
<#+ foreach(var f in fields) { #>
				public const string <#= Context.UseDisplayNames ? (FirstNotNullOrEmpty((entityFilter == null || entityFilter.AttributeRenames == null) ? null : entityFilter.AttributeRenames, f.Attribute.LogicalName) ?? f.FriendlyName) : f.DisplayName #> = "<#= f.SchemaName #>";
<#+ } #>
			}

			#endregion
<#+ } #>

<#+ if (Context.IsGenerateFieldLabels) { #>

			#region Labels

			public static class Labels
			{
<#+ foreach(var f in fields) {#>
<#+ if (f.LocalizedLabels != null) { #>
				public static IDictionary<int, string> <#= Context.UseDisplayNames ? (FirstNotNullOrEmpty((entityFilter == null || entityFilter.AttributeRenames == null) ? null : entityFilter.AttributeRenames, f.Attribute.LogicalName) ?? f.FriendlyName) : f.DisplayName #> { get; set; } =
					new Dictionary<int, string>
					{
<#+ foreach(var grp in f.LocalizedLabels.GroupBy(e => e.LanguageCode)) {
		var locLabelTemp = grp.FirstOrDefault(e => e.LanguageCode == grp.Key); #>
						{ <#= grp.Key #>, <#= ToLiteral(locLabelTemp == null ? null : locLabelTemp.Label) #>},
<#+ } #>
					};

<#+ } #>
<#+ } #>
			}

			#endregion
<#+ } #>
		}

		#endregion
<#+ if (Context.IsGenerateRelationNames) { #>

		#region Relations

		public static class Relations
		{
			public static class OneToN
			{
<#+ //BEGIN// 1:N Realationships
	foreach(var attribute in oneNRels.Where(e => entityFilter == null || entityFilter.OneToN == null || entityFilter.OneToN.Contains(e.SchemaName)))	{#>
<#+ if(attribute.SchemaName == "calendar_calendar_rules" || attribute.SchemaName == "service_calendar_rules") { #>
				public const string <#=attribute.SchemaName#> = "calendarrules";
<#+ } else {
			var relationName = FirstNotNullOrEmpty((entityFilter == null || entityFilter.OneToNRenames == null) ? null : entityFilter.OneToNRenames, attribute.SchemaName) ?? attribute.FriendlyName;
#>
				public const string <#=relationName#> = "<#=attribute.SchemaName#>";
<#+ } #>
<#+ } #>
			}
<#+ //END// 1:N Realationships #>
			
			public static class NToOne
			{
<#+ //BEGIN// N:1 Relationships 
	foreach(var attribute in nOneRels.Where(e => entityFilter == null || entityFilter.NToOne == null || entityFilter.NToOne.Contains(e.SchemaName)))	{
			var relationName = FirstNotNullOrEmpty((entityFilter == null || entityFilter.NToOneRenames == null) ? null : entityFilter.NToOneRenames, attribute.SchemaName) ?? attribute.FriendlyName;
#>
				public const string <#= relationName #> = "<#=attribute.SchemaName#>";
<#+ } #>

				public static class Lookups
				{
<#+ //BEGIN// N:1 Relationships lookups
	foreach(var attribute in nOneRels.Where(e => entityFilter == null || entityFilter.NToOne == null || entityFilter.NToOne.Contains(e.SchemaName)))	{
			var relationName = FirstNotNullOrEmpty((entityFilter == null || entityFilter.NToOneRenames == null) ? null : entityFilter.NToOneRenames, attribute.SchemaName) ?? attribute.FriendlyName;
#>
					public const string <#=relationName#> = "<#=attribute.LogicalName#>";
<#+ } #>
				}
			}
<#+ //END// N:1 Realationships #>

			public static class NToN
			{

<#+ //BEGIN// N:N Realationships 
	foreach(var attribute in nNRels.Where(e => entityFilter == null || entityFilter.NToN == null || entityFilter.NToN.Contains(e.SchemaName)).GroupBy(element => element.SchemaName).Select(group => group.First()))	{
			var relationName = FirstNotNullOrEmpty((entityFilter == null || entityFilter.NToNRenames == null) ? null : entityFilter.NToNRenames, attribute.SchemaName) ?? attribute.FriendlyName;
#>
				public const string <#= relationName #> = "<#= attribute.SchemaName #>";
<#+ } #>
			}
<#+ //END// N:N Relationships  #>
		}

		#endregion
<#+ } #>
<#+ } #>

		#endregion
	}

	#endregion
<#+
		manager.EndBlock();
	}

	void Generate(Manager manager, Dictionary<string, MappingEnum> globalEnumerations)
	{
		var selectedEntities = Context.Entities.Where(e => Context.SelectedEntities.Contains(e.LogicalName));

		foreach (var entity in selectedEntities)
		{
			Generate(manager, entity, globalEnumerations);
		}
	}
#>

<#+
   /***********************************************************
    **********************************************************
    *********************************************************
    ********************************************************
    *******************************************************
    ******************************************************
    *****************************************************
    ****************************************************
    ***************************************************
    **************************************************
    *************************************************
    ************************************************
    ***********************************************
    **********************************************
    *********************************************
	// *** >>>> Contracts generator <<<<
    *********************************************
    **********************************************
    ***********************************************
    ************************************************
    *************************************************
    **************************************************
    ***************************************************
    ****************************************************
    *****************************************************
    ******************************************************
    *******************************************************
    ********************************************************
    *********************************************************
    **********************************************************
   **/
#>

<#+
	void GenerateGlobalEnumerations(Manager manager, Dictionary<string, MappingEnum> globalEnumerations)
    {

		if (Context.SplitFiles) {
			manager.StartNewFile(Context.FileName + "GlobalEnums.cs");
#>
//         Project / File: <#= Context.Namespace #> / <#= Context.FileName + "_" + crmEntityName #>.cs
// File generated by: CRM Code Generator - Ahmed Elsawalhy (Yagasoft.com)

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
<#+ if (Context.IsAddEntityAnnotations) { #>
using System.ComponentModel.DataAnnotations;
<#+ } #>
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Xml.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Reflection;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Query;

namespace <#= Context.Namespace #><#+ if (Context.FileName != "CrmSchema") { #>.<#= Context.FileName #><#+ } #>

{
<#+ } #>

	#region GlobalEnums

	public class GlobalEnums
	{
<#+
	 foreach(var enm in globalEnumerations) {
#>
		public enum <#= enm.Value.EnumName #>
		{
<#+ foreach(var item in enm.Value.Items) { #>
			<#+ if (Context.IsAddEntityAnnotations) { #>[EnumMember]<#+ } #><#= item.Name #> = <#= item.Value #>,
<#+ } #>
		}
<#+ } #>
	}
<#+
		if (Context.SplitFiles) {
			manager.EndBlock();
		}
	}
#>

<#+
	void GenerateContracts(Manager manager, EntityProfilesHeader header)
	{
		var fileName = "";

		if (Context.SplitContractFiles && header != null)
		{
			fileName = header.Prefix + Context.FileName + header.Suffix + "Contracts.cs";
			manager.StartNewFile(fileName);
		}
		else
		{
			fileName = Context.FileName + "Contracts.cs";
			manager.StartNewFile(fileName);
		}
#>
//         Project / File: <#= Context.Namespace #> / <#= fileName #>
// File generated by: CRM Code Generator - Ahmed Elsawalhy (Yagasoft.com)

using System;
using System.Collections.Generic;
using System.ComponentModel;
<#+ if (Context.IsAddContractAnnotations) { #>
using System.ComponentModel.DataAnnotations;
<#+ } #>
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Text;
using System.Runtime.Serialization;

namespace <#= Context.Namespace #><#+ if (Context.FileName != "CrmSchema") { #>.<#= Context.FileName #><#+ } #>

{

	#region Contracts
<#+
		var selectedEntities = Context.Entities.Where(e => Context.SelectedEntities.Contains(e.LogicalName)).ToArray();
		var entityProfiles = Context.EntityProfilesHeaderSelector;
		var entityHeaders = Context.SplitFiles && header != null
				? new [] { header }
				: entityProfiles.EntityProfilesHeaders.ToArray();

		foreach (var entityFilterT in entityHeaders) {
		foreach (var entityFilterQ in entityFilterT.EntityProfiles) {
			var entity = Context.Entities.FirstOrDefault(e => e.LogicalName == entityFilterQ.LogicalName);

			if (entity == null)
			{
				continue;
			}

			var oneNRels= entity.RelationshipsOneToMany.Where(r => selectedEntities.Select(m => m.LogicalName).Contains(r.Type));
			var nOneRels = entity.RelationshipsManyToOne.Where(r => selectedEntities.Select(m => m.LogicalName).Contains(r.Type));
			var nNRels = entity.RelationshipsManyToMany.Where(r => selectedEntities.Select(m => m.LogicalName).Contains(r.Type));
			var isApplyEntityFilter = Context.EarlyBoundFilteredSelected.Contains(entity.LogicalName);
			var isContract = entityProfiles.EntityProfilesHeaders.Any(e => e.EntityProfiles.Any(filter => filter.LogicalName == entity.LogicalName && filter.IsIncluded));
			var entityFilter = Context.CrmEntityProfiles.FirstOrDefault(e => e.LogicalName == entity.LogicalName);
			var crmEntityName = ((entityFilter == null || entityFilter.EntityRename == null) ? null : entityFilter.EntityRename) ?? (Context.UseDisplayNames ? entity.FriendlyName : entity.HybridName);

			var prefix = entityFilterT.Prefix;
			var suffix = entityFilterT.Suffix;

			if (entityFilterQ == null || !entityFilterQ.IsIncluded)
			{
				continue;
			}

			var contractEntityName =  entityFilterQ.EntityRename ?? crmEntityName;
#>

<#+ //START// Contracts  #>

	#region <#= prefix + contractEntityName + suffix #> contract

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, CrmEntityMapping("<#= entity.LogicalName #>", "<#= entity.SchemaName #>", <#= ToLiteral(entity.Label) #>)<#+ if (entityFilterQ.EntityAnnotations != null) { #>, <#= entityFilterQ.EntityAnnotations #><#+ } #>]
	public partial class <#= prefix + contractEntityName + suffix #> : EntityContract
	{
<#+ if (entityFilterQ.ValueClearMode != null) { #>
		[DataMember] public override ClearMode? ValueClearMode { get { return ClearMode.<#= entityFilterQ.ValueClearMode #>; } set{} }
<#+ } #>
		[DataMember, CrmFieldMapping("<#= entity.PrimaryKey.LogicalName #>")] public Guid? Id { get; set; }
<#+	foreach(var attribute in entity.Fields.Where(fieldQ => !fieldQ.Attribute.IsEntityReferenceHelper && fieldQ.IsValidForRead && entityFilterQ.Attributes != null && entityFilterQ.Attributes.Contains(fieldQ.Attribute.LogicalName)))	{
            var attributeName = Context.UseDisplayNames ? (entityFilterQ.AttributeRenames == null ? attribute.FriendlyName : (FirstNotNullOrEmpty(entityFilterQ.AttributeRenames, attribute.Attribute.LogicalName) ?? attribute.FriendlyName)) : attribute.DisplayName;
            
			var attributeType = ConvertToContractType(attribute, attributeName);
			attributeType = (attribute.Attribute != null && attribute.Attribute.IsMultiTyped) ? "LookupValue" : attributeType;

            var attributeAnnotations = FirstNotNullOrEmpty(entityFilterQ.AttributeAnnotations == null ? null : entityFilterQ.AttributeAnnotations, attribute.Attribute.LogicalName);
#>
		[DataMember, CrmFieldMapping("<#=attribute.Attribute.LogicalName#>"<#+ if (attribute.TargetTypeForCrmSvcUtil.Contains("EntityReference") && !attributeType.Contains("EntityReference") && (attribute.Attribute == null || !attribute.Attribute.IsMultiTyped)) { #>, "<#= attribute.LookupData == null ? "" : attribute.LookupData.LookupSingleType #>"<#+ } #>)<#+ if (Context.IsAddContractAnnotations) { #><#= (entityFilterQ.ReadOnly != null && entityFilterQ.ReadOnly.Contains(attribute.LogicalName)) ? ", ReadOnlyField" : "" #><#+ if (attribute.IsRequired) { #>, Required<#+ } #><#+ if (attribute.MaxLength != null) { #>, MaxLength(<#= attribute.MaxLength #>)<#+ } #><#+ if (attribute.MaxLength != null && attributeType == "string") { #>, StringLength(<#= attribute.MaxLength #>)<#+ } #><#+ if (attribute.Min != null && attribute.Max != null) { #>, Range(<#= attribute.Min #><#= attribute.Max == null ? "" : ("," + attribute.Max) #>)<#+ } #><#+ if (attribute.ImageData != null && attribute.ImageData.MaxWidth != null && attribute.ImageData.MaxHeight != null) { #>, MaxLength(<#= attribute.ImageData.MaxSizeInKb * 1000 #>), MaxWidth(<#= attribute.ImageData.MaxWidth #>), MaxHeight(<#= attribute.ImageData.MaxHeight #>)<#+ } #><#+ } #><#+ if (attributeAnnotations != null) { #>, <#= attributeAnnotations #><#+ } #>] public <#= attributeType #> <#= attributeName #> { get; set; }
<#+ if (entityFilterQ.ClearFlag != null && entityFilterQ.ClearFlag.Contains(attribute.LogicalName)) { #>
		[DataMember] public bool Clear_<#= attributeName #> { get; set; } = false;
<#+ } #>
<#+ if (attribute.TargetTypeForCrmSvcUtil.Contains("EntityReference")) { #>
        [DataMember] public string <#= attributeName #>Name { get; set; }
<#+ if (entityFilterQ.IsLookupLabels) { #>
        [DataMember<#+ if ((attribute.LookupData != null && attribute.LookupData.LookupLabel != null) && !string.IsNullOrEmpty(attribute.LookupData == null ? "" : attribute.LookupData.LookupLabel.LabelFieldNames)) { #>, Label("<#= (attribute.LookupData == null) ? "" : attribute.LookupData.LookupLabel.LabelFieldNames #>", "<#= (attribute.LookupData == null) ? "" : attribute.LookupData.LookupLabel.LogicalName #>", "<#= (attribute.LookupData == null) ? "" : attribute.LookupData.LookupLabel.IdFieldName #>", "<#=attribute.Attribute.LogicalName#>")<#+ } #>] public <#= Context.IsUseCustomDictionary ? "List<OptionsetLanguageLabel>" : "IDictionary<int, string>" #> <#= attributeName #>Labels { get; set; }
<#+ } #>
<#+ } #>
<#+ } #>

		#region Relationships

<#+ //BEGIN// 1:N Realationships
        var oneNRelsContract = entity.RelationshipsOneToMany.Where(r => selectedEntities.Select(m => m.LogicalName).Contains(r.Type)
			&& entityFilterT.EntityProfiles.Any(filter => filter.LogicalName == r.Type)
			&& entityFilterQ.OneToN != null && entityFilterQ.OneToN.Contains(r.SchemaName));
        foreach(var attribute in oneNRelsContract)	{
			var crmEntityNameTempR =  Context.CrmEntityProfiles.FirstOrDefault(e => e.LogicalName == attribute.ToEntity.LogicalName);
			var crmEntityNameTemp = (crmEntityNameTempR == null || crmEntityNameTempR.EntityRename == null)
				? (Context.UseDisplayNames ? attribute.ToEntity.FriendlyName : attribute.ToEntity.HybridName) : crmEntityNameTempR.EntityRename;
			var contractEntityNameTemp =  entityFilterT.EntityProfiles.First(filter => filter.LogicalName == attribute.ToEntity.LogicalName).EntityRename
				?? crmEntityNameTemp;
			var relationName = entityFilterQ.OneToNRenames == null ? attribute.FriendlyName : (FirstNotNullOrEmpty(entityFilterQ.OneToNRenames, attribute.SchemaName) ?? attribute.FriendlyName);
			var isReadOnly = entityFilterQ.OneToNReadOnly != null && FirstNotNullOrDefault(entityFilterQ.OneToNReadOnly, attribute.SchemaName);
#>
<#+ if(attribute.SchemaName == "calendar_calendar_rules" || attribute.SchemaName == "service_calendar_rules") { #>
		[AttributeLogicalName("calendarrules")] public CalendarRule[] CalendarRules;
<#+ } else { #>
		[DataMember, CrmRelationMapping("<#=attribute.SchemaName#>", "<#= crmEntityNameTemp #>"<#=attribute.EntityRole == "null" ? "" :", " + attribute.EntityRole.Replace("Microsoft.Xrm.Sdk.EntityRole", "EntityRelationRole") #>)<#+ if (Context.IsAddContractAnnotations) { #><#= isReadOnly ? ", ReadOnlyField" : "" #><#+ } #>] public <#= prefix + contractEntityNameTemp + suffix #>[] <#= relationName #> { get; set; }
<#+ } #>
<#+ } //END// 1:N Realationships #>

<#+ //BEGIN// N:1 Realationships 
    var nOneRelsContract = entity.RelationshipsManyToOne.Where(r => selectedEntities.Select(m => m.LogicalName).Contains(r.Type)
			&& entityFilterT.EntityProfiles.Any(filter => filter.LogicalName == r.Type)
			&& entityFilterQ.NToOne != null && entityFilterQ.NToOne.Contains(r.SchemaName));

	foreach(var attributeR in nOneRelsContract)	{
			var crmEntityNameTempR =  Context.CrmEntityProfiles.FirstOrDefault(e => e.LogicalName == attributeR.ToEntity.LogicalName);
			var crmEntityNameTemp = (crmEntityNameTempR == null || crmEntityNameTempR.EntityRename == null)
				? (Context.UseDisplayNames ? attributeR.ToEntity.FriendlyName : attributeR.ToEntity.HybridName) : crmEntityNameTempR.EntityRename;
			var contractEntityNameTemp =  entityFilterT.EntityProfiles.First(filter => filter.LogicalName == attributeR.ToEntity.LogicalName).EntityRename
				?? crmEntityNameTemp;
			var relationName = entityFilterQ.NToOneRenames == null ? attributeR.FriendlyName : (FirstNotNullOrEmpty(entityFilterQ.NToOneRenames, attributeR.SchemaName) ?? attributeR.FriendlyName);
			var flatten = entityFilterQ.NToOneFlatten != null && entityFilterQ.NToOneFlatten.ContainsKey(attributeR.SchemaName) && entityFilterQ.NToOneFlatten[attributeR.SchemaName];
			var isReadOnly = entityFilterQ.NToOneReadOnly != null && FirstNotNullOrDefault(entityFilterQ.NToOneReadOnly, attributeR.SchemaName);
#>
		[<#= flatten ? "" : "DataMember, " #>CrmRelationMapping("<#=attributeR.SchemaName#>", "<#= crmEntityNameTemp #>"<#=attributeR.EntityRole == "null" ? "" :", " + attributeR.EntityRole.Replace("Microsoft.Xrm.Sdk.EntityRole", "EntityRelationRole") #>)<#+ if (Context.IsAddContractAnnotations) { #><#= isReadOnly ? ", ReadOnlyField" : "" #><#+ } #>] public <#= prefix + contractEntityNameTemp + suffix #> <#= relationName #> { get; set; }
<#+	var entityFilterQF = entityFilterT.EntityProfiles.First(filter => filter.LogicalName == attributeR.ToEntity.LogicalName);
	if (flatten)
	{
#>

		#region <#= relationName #> Flat Structure

<#+
		foreach(var attribute in attributeR.ToEntity.Fields.Where(fieldQ => (!fieldQ.Attribute.IsEntityReferenceHelper && fieldQ.IsValidForRead && entityFilterQF.Attributes != null && entityFilterQF.Attributes.Contains(fieldQ.Attribute.LogicalName)) || fieldQ.Attribute.LogicalName == attributeR.ToEntity.PrimaryKey.LogicalName))	{
			var attributeName = (attribute.Attribute.LogicalName == attributeR.ToEntity.PrimaryKey.LogicalName)
				? "Id"
				: (Context.UseDisplayNames ? (entityFilterQF.AttributeRenames == null ? attribute.FriendlyName : (FirstNotNullOrEmpty(entityFilterQF.AttributeRenames, attribute.Attribute.LogicalName) ?? attribute.FriendlyName)) : attribute.DisplayName);

            var attributeTypeName = Context.UseDisplayNames ? (entityFilterQF.AttributeRenames == null ? attribute.FriendlyName : (FirstNotNullOrEmpty(entityFilterQF.AttributeRenames, attribute.Attribute.LogicalName) ?? attribute.FriendlyName)) : attribute.DisplayName;
            
			var attributeType = ConvertToContractType(attribute, attributeTypeName);
			attributeType = (attributeType.Contains("Enum?") || attributeType.Contains("Enum[]")) ? (prefix + contractEntityNameTemp + suffix + "." + attributeType) : attributeType;
			attributeType = (attribute.Attribute != null && attribute.Attribute.IsMultiTyped) ? "LookupValue" : attributeType;
#>
		[DataMember, CrmFieldMapping("<#=attribute.Attribute.LogicalName#>"<#+ if (attribute.TargetTypeForCrmSvcUtil.Contains("EntityReference") && !attributeType.Contains("EntityReference") && (attribute.Attribute == null || !attribute.Attribute.IsMultiTyped)) { #>, "<#= (attribute.LookupData == null || attribute.LookupData.LookupSingleType == null) ? "" : attribute.LookupData.LookupSingleType #>"<#+ } #>), CrmRelationMapping("<#=attributeR.SchemaName#>", "<#= crmEntityNameTemp #>"<#=attributeR.EntityRole == "null" ? "" :", " + attributeR.EntityRole.Replace("Microsoft.Xrm.Sdk.EntityRole", "EntityRelationRole") #>)<#+ if (Context.IsAddContractAnnotations) { #><#= (entityFilterQ.ReadOnly != null && entityFilterQ.ReadOnly.Contains(attribute.LogicalName)) || isReadOnly ? ", ReadOnlyField" : "" #><#+ } #>] public <#= attributeType #> <#= relationName #><#= attributeName #> { get; set; }
<#+ if (attribute.TargetTypeForCrmSvcUtil.Contains("EntityReference")) { #>
        [DataMember] public string <#= relationName #><#= attributeName #>Name { get; set; }
<#+ if (entityFilterQF.IsLookupLabels) { #>
        [DataMember<#+ if ((attribute.LookupData != null && attribute.LookupData.LookupLabel != null) && !string.IsNullOrEmpty((attribute.LookupData == null) ? null : attribute.LookupData.LookupLabel.LabelFieldNames)) { #>, Label("<#= (attribute.LookupData == null) ? "" : attribute.LookupData.LookupLabel.LabelFieldNames #>", "<#= (attribute.LookupData == null) ? "" : attribute.LookupData.LookupLabel.LogicalName #>", "<#= (attribute.LookupData == null) ? "" : attribute.LookupData.LookupLabel.IdFieldName #>", "<#=attribute.Attribute.LogicalName#>")<#+ } #>] public <#= Context.IsUseCustomDictionary ? "List<OptionsetLanguageLabel>" : "IDictionary<int, string>" #> <#= relationName #><#= attributeName #>Labels { get; set; }
<#+ } #>
<#+ } #>
<#+ } #>

		#endregion
<#+ } #>
<#+ } //END// N:1 Realationships  #>

<#+ //BEGIN// N:N Realationships
    var nNRelsContract = entity.RelationshipsManyToMany.Where(r => selectedEntities.Select(m => m.LogicalName).Contains(r.Type)
			&& entityFilterT.EntityProfiles.Any(filter => filter.LogicalName == r.Type)
			&& entityFilterQ.NToN != null && entityFilterQ.NToN.Contains(r.SchemaName));

	foreach(var attribute in nNRelsContract)	{
			var crmEntityNameTempR = Context.CrmEntityProfiles.FirstOrDefault(e => e.LogicalName == attribute.ToEntity.LogicalName);
			var crmEntityNameTemp = (crmEntityNameTempR == null || crmEntityNameTempR.EntityRename == null)
				? (Context.UseDisplayNames ? attribute.ToEntity.FriendlyName : attribute.ToEntity.HybridName): crmEntityNameTempR.EntityRename;
			var contractEntityNameTemp =  entityFilterT.EntityProfiles.First(filter => filter.LogicalName == attribute.ToEntity.LogicalName).EntityRename
				?? crmEntityNameTemp;
			var relationName = (entityFilterQ.NToNRenames == null ? attribute.FriendlyName : (FirstNotNullOrEmpty(entityFilterQ.NToNRenames, attribute.SchemaName) ?? attribute.FriendlyName))
				+ (nNRelsContract.Count(r => r.SchemaName == attribute.SchemaName) > 1 ? (attribute.EntityRole == "null" ? "_1" : "_" + attribute.EntityRole.Split('.').Last()) : "");
			var isReadOnly = entityFilterQ.NToNReadOnly != null && FirstNotNullOrDefault(entityFilterQ.NToNReadOnly, attribute.SchemaName);
#>
		[DataMember, CrmRelationMapping("<#=attribute.SchemaName#>", "<#= crmEntityNameTemp #>"<#=attribute.EntityRole == "null" ? "" : ", " + attribute.EntityRole.Replace("Microsoft.Xrm.Sdk.EntityRole", "EntityRelationRole") #>)<#+ if (Context.IsAddContractAnnotations) { #><#= isReadOnly ? ", ReadOnlyField" : "" #><#+ } #>] public <#= prefix + contractEntityNameTemp + suffix #>[] <#= relationName #> { get; set; }
<#+ } //END// N:N Realationships  #>

		#endregion

		#region Enums

<#+ foreach(var enm in entity.Enums.Where(e => entityFilterQ.Attributes != null && entityFilterQ.Attributes.Contains(e.LogicalName))) {
		var attribute = entity.Fields.FirstOrDefault(field => field.LogicalName == enm.LogicalName);
        var attributeName = Context.UseDisplayNames ? (entityFilterQ.AttributeRenames == null ? enm.FriendlyName : (FirstNotNullOrEmpty(entityFilterQ.AttributeRenames, attribute.Attribute.LogicalName) ?? enm.FriendlyName)) : enm.DisplayName;
 #>
		[DataContract]
		public enum <#= attributeName #>Enum
		{
<#+ foreach(var item in enm.Items) { #>
			[EnumMember]<#= item.Name #> = <#= item.Value #>,
<#+ } #>
		}
	
<#+ } #>

		#endregion
	}

	#endregion
<#+ } #>
<#+ } #>

<#+
		foreach (var entityFilterT in entityHeaders) { 
		foreach (var entityFilterQ in entityFilterT.EntityProfiles) {
			var entity = Context.Entities.FirstOrDefault(e => e.LogicalName == entityFilterQ.LogicalName);

			if (entity == null)
			{
				continue;
			}

			var prefix = entityFilterT.Prefix;
			var suffix = entityFilterT.Suffix;

			if (entityFilterQ == null || !entityFilterQ.IsIncluded || !entityFilterQ.IsGenerateMeta)
			{
				continue;
			}

			var entityFilter = Context.CrmEntityProfiles.FirstOrDefault(e => e.LogicalName == entity.LogicalName);
			var crmEntityName = (entityFilter == null || entityFilter.EntityRename == null) ? (Context.UseDisplayNames ? entity.FriendlyName : entity.HybridName) : entityFilter.EntityRename;
			var contractEntityName =  entityFilterQ.EntityRename ?? crmEntityName;
#>

	#region <#= prefix + contractEntityName + suffix #> labels

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
    [DataContract]
    public class <#= prefix + contractEntityName + suffix #>Labels
    {
        [DataMember] public string EntityLabel = "<#= entity.Label ?? null #>";

		#region Attributes keyed labels

<#+ foreach(var f in entity.Fields.Where(fieldQ => !fieldQ.Attribute.IsEntityReferenceHelper && fieldQ.IsValidForRead
        && entityFilterQ.Attributes != null && entityFilterQ.Attributes.Contains(fieldQ.Attribute.LogicalName))) {
#>
<#+ if (f.LocalizedLabels != null && f.LocalizedLabels.Any()) {
        var fieldName = Context.UseDisplayNames ? (entityFilterQ.AttributeRenames == null ? f.FriendlyName : (FirstNotNullOrEmpty(entityFilterQ.AttributeRenames, f.Attribute.LogicalName) ?? f.FriendlyName)) : f.DisplayName;
#>
        [DataMember]
		public IDictionary<int, string> <#= fieldName #> { get; set; } =
			new Dictionary<int, string>
			{
<#+ foreach(var grp in f.LocalizedLabels.GroupBy(e => e.LanguageCode)) { 
		var locLabel = grp.FirstOrDefault(e => e.LanguageCode == grp.Key); #>
				{ <#= grp.Key #>, <#= ToLiteral(locLabel == null ? null : locLabel.Label) #>},
<#+ } #>
			};
<#+ } #>
<#+ } #>
 
		#endregion

		#region Enums keyed labels

<#+ foreach(var enm in entity.Enums.Where(e => entityFilterQ.Attributes != null && entityFilterQ.Attributes.Contains(e.LogicalName))) {
        var attribute = entity.Fields.FirstOrDefault(field => field.LogicalName == enm.LogicalName);
        if (!enm.Items.Any() || !entityFilterQ.Attributes.Contains(attribute.Attribute.LogicalName))
            continue;
        var attributeName = Context.UseDisplayNames ? (entityFilterQ.AttributeRenames == null ? enm.FriendlyName : (FirstNotNullOrEmpty(entityFilterQ.AttributeRenames, attribute == null ? "" : attribute.Attribute.LogicalName) ?? enm.FriendlyName)) : enm.DisplayName;
        var languagesCreated = new List<int>();
#>
        [DataMember]
		public IDictionary<int, IDictionary<int, string>> <#= attributeName #>Enum { get; set; } =
			new Dictionary<int, IDictionary<int, string>>
			{
<#+ foreach(var grp in enm.Items.SelectMany(e => e.LocalizedLabels).GroupBy(e => e.LanguageCode)) { #>
<#+		if (!languagesCreated.Contains(grp.Key)) {
			languagesCreated.Add(grp.Key);
#>
				{ <#= grp.Key #>,
					new Dictionary<int, string>
					{
<#+ foreach(var item in enm.Items) { 
		var locLabel = item.LocalizedLabels.FirstOrDefault(e => e.LanguageCode == grp.Key); #>
						{<#= item.Value #>, <#= ToLiteral(locLabel == null ? null : locLabel.Label) #>},
<#+ } #>
					}
				},
<#+ } #>
<#+ } #>
			};

<#+ } #>

		#endregion
    }

	#endregion
<#+ } #>
<#+ } #>
<#+ //END// Contracts  #>
<#+
		manager.EndBlock();
	}

	void GenerateContracts(Manager manager)
	{
		var entityProfiles = Context.EntityProfilesHeaderSelector;

		if (Context.SplitContractFiles)
		{
			foreach (var entityFilter in entityProfiles.EntityProfilesHeaders)
			{
				GenerateContracts(manager, entityFilter);
			}
		}
		else
		{
			GenerateContracts(manager, null);
		}
	}
#>

<#+
   /***********************************************************
    **********************************************************
    *********************************************************
    ********************************************************
    *******************************************************
    ******************************************************
    *****************************************************
    ****************************************************
    ***************************************************
    **************************************************
    *************************************************
    ************************************************
    ***********************************************
    **********************************************
    *********************************************
	// *** >>>> Base file generator <<<<
    *********************************************
    **********************************************
    ***********************************************
    ************************************************
    *************************************************
    **************************************************
    ***************************************************
    ****************************************************
    *****************************************************
    ******************************************************
    *******************************************************
    ********************************************************
    *********************************************************
    **********************************************************
   **/
#>

<#+
	void GenerateBase(Manager manager)
	{
		manager.StartNewFile(Context.FileName + "Base.cs");
#>
//         Project / File: <#= Context.Namespace #> / <#= Context.FileName + "Base" #>.cs
// File generated by: CRM Code Generator - Ahmed Elsawalhy (Yagasoft.com)

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Text;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Reflection;
using System.ServiceModel;

namespace <#= Context.Namespace #><#+ if (Context.FileName != "CrmSchema") { #>.<#= Context.FileName #><#+ } #>

{

	#region Base code
		
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Class)]
	public class CrmEntityMappingAttribute : Attribute
	{
		public string LogicalName { get; private set; }
		public string SchemaName { get; private set; }
		public string DisplayName { get; private set; }

		public CrmEntityMappingAttribute(string logicalName, string schemaName, string displayName = null)
		{
			if (string.IsNullOrWhiteSpace(logicalName))
			{
				throw new ArgumentNullException("logicalName");
			}

			if (string.IsNullOrWhiteSpace(schemaName))
			{
				throw new ArgumentNullException("schemaName");
			}

			LogicalName = logicalName;
			SchemaName = schemaName;
			DisplayName = displayName;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Property | AttributeTargets.Field)]
	public class ReadOnlyFieldAttribute : Attribute
	{}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Property | AttributeTargets.Field)]
	public class CrmFieldMappingAttribute : Attribute
	{
		public string LogicalName { get; private set; }
		public string RelatedEntity { get; private set; }

		public CrmFieldMappingAttribute(string logicalName, string relatedEntity = null)
		{
			if (string.IsNullOrWhiteSpace(logicalName))
			{
				throw new ArgumentNullException("logicalName");
			}

			LogicalName = logicalName;
			RelatedEntity = relatedEntity;
		}
	}

	[DataContract]
	public enum EntityRelationRole
	{
		/// <summary>Specifies that the entity is the referencing entity. Value = 0.</summary>
		[EnumMember] Referencing,
		/// <summary>Specifies that the entity is the referenced entity. Value = 1.</summary>
		[EnumMember] Referenced,
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Property | AttributeTargets.Field)]
	public class CrmRelationMappingAttribute : Attribute
	{
		public string SchemaName { get; private set; }
		public string RelatedEntityName { get; private set; }
		public EntityRelationRole? Role { get; private set; }

		public CrmRelationMappingAttribute(string schemaName, string relatedEntityName)
		{
			if (string.IsNullOrWhiteSpace(schemaName))
			{
				throw new ArgumentNullException("schemaName");
			}

			if (relatedEntityName == null)
			{
				throw new ArgumentNullException("relatedEntityName");
			}

			SchemaName = schemaName;
			RelatedEntityName = relatedEntityName;
		}

		public CrmRelationMappingAttribute(string schemaName, string relatedEntityName, EntityRelationRole role)
		{
			if (string.IsNullOrWhiteSpace(schemaName))
			{
				throw new ArgumentNullException("schemaName");
			}

			if (relatedEntityName == null)
			{
				throw new ArgumentNullException("relatedEntityName");
			}

			SchemaName = schemaName;
			RelatedEntityName = relatedEntityName;
			Role = role;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Property)]
	public class MaxWidth : Attribute
	{
		public short Width { get; set; }

		public MaxWidth(short width)
		{
			Width = width;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Property)]
	public class MaxHeight : Attribute
	{
		public short Height { get; set; }

		public MaxHeight(short height)
		{
			Height = height;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public class OptionsetLanguageLabel
	{
		public int LanguageCode { get; set; }
		public string OptionsetLabel {get; set;}
	}

	public enum ClearMode
	{
		[EnumMember] Disabled,
		[EnumMember] Empty,
		[EnumMember] Convention,
		[EnumMember] Flag
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Property)]
	public class LabelAttribute : Attribute
	{
		public string LabelFieldNames { get; set; }
		public string LogicalName { get; set; }
		public string IdFieldName { get; set; }
		public string FieldLogicalName { get; set; }

		public LabelAttribute(string labelFieldNames, string logicalName, string idFieldName, string fieldLogicalName)
		{
			LabelFieldNames = labelFieldNames;
			LogicalName = logicalName;
			IdFieldName = idFieldName;
			FieldLogicalName = fieldLogicalName;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract]
	public class LookupValue
	{
		public LookupEntity Entity
		{
			get
			{
				LookupEntity value;
				return Enum.TryParse(EntityName, true, out value) ? value : LookupEntity.Unknown;
			}
			set => EntityName = value.ToString().ToLower();
		}

		public string EntityName
		{
			get => entityName;
			set
			{
				if (value == null) { throw new ArgumentNullException(nameof(EntityName)); }
				entityName = value;
			}
		}
		private string entityName;

		public Guid Id { get; set; }

		public LookupValue()
		{ }

		public LookupValue(string entityName, Guid id)
		{
			EntityName = entityName;
			Id = id;
		}

		public LookupValue(LookupEntity entity, Guid id)
		{
			Entity = entity;
			Id = id;
		}
	}

	public enum LookupEntity
	{
		[EnumMember] Unknown,
		[EnumMember] Account,
		[EnumMember] Contact,
		[EnumMember] User,
		[EnumMember] Team
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public static partial class CrmGeneratorExtensions
	{
		/// <summary>
		/// Retrieves the label of the 'OptionSetValue' using the corresponding enum member constant
		/// and the language code given.
		/// </summary>
		/// <param name="enumMember">The early-bound enum member constant; e.g.: 'Account.Enums.IndustryCode.Accounting'</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns>The label corresponding to the enum constant and the language code.</returns>
		public static string GetLabel(this Enum enumMember, int languageCode = 1033)
		{
			var enumType = enumMember.GetType();
			var enumName = enumType.Name.Substring(0, enumType.Name.LastIndexOf("Enum"));
			var enumParentType = enumType.DeclaringType;

			if (enumParentType == null)
			{
				return null;
			}

			var enumsType = enumParentType.GetNestedType("Enums");
			Type labelsType;

			var isContract = false;

			if (enumsType == null)
			{
				labelsType = enumParentType.Assembly.GetType($"{enumParentType.Namespace}.{enumParentType.Name}Labels", false);
				isContract = true;
			}
			else
            {
				labelsType = enumsType.GetNestedType("Labels");
			}

			if (labelsType == null)
			{
				return null;
			}

			PropertyInfo property;

			if (isContract)
            {
				property = labelsType.GetProperty($"{enumName}Enum");
			}
			else
            {
				property = labelsType.GetProperty(enumName);
			}

			if (property == null)
			{
				return null;
			}

			IDictionary<int, string> labels = null;
			IDictionary<int, IDictionary<int, string>> locLabels;

			if (isContract)
			{
				locLabels = property.GetValue(Activator.CreateInstance(labelsType)) as IDictionary<int, IDictionary<int, string>>;
			}
			else
			{
				locLabels = property.GetValue(labelsType) as IDictionary<int, IDictionary<int, string>>;
			}

			if (locLabels?.TryGetValue(languageCode, out labels) != true)
            {
				return null;
			}

			if (labels.TryGetValue((int)Enum.Parse(enumType, enumMember.ToString()), out var label) != true)
            {
				return null;
			}

			return label;
		}

	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract]
	public partial class EntityContract
	{
		[DataMember] public virtual ClearMode? ValueClearMode { get { return ClearMode.<#= Context.ClearMode #>; } set{} }
	}

<#+
	}
#>

<#+
   /***********************************************************
    **********************************************************
    *********************************************************
    ********************************************************
    *******************************************************
    ******************************************************
    *****************************************************
    ****************************************************
    ***************************************************
    **************************************************
    *************************************************
    ************************************************
    ***********************************************
    **********************************************
    *********************************************
	// *** >>>> Generated files closure <<<<
    *********************************************
    **********************************************
    ***********************************************
    ************************************************
    *************************************************
    **************************************************
    ***************************************************
    ****************************************************
    *****************************************************
    ******************************************************
    *******************************************************
    ********************************************************
    *********************************************************
    **********************************************************
   **/
#>

<#+
	void CloseFiles(Manager manager)
	{
		manager.EndBlock(); 

		manager.StartFooter();
#>

	#endregion

}

<#+
		manager.EndBlock();

		manager.Process(true);
	}
#>

<#+
   /***********************************************************
    **********************************************************
    *********************************************************
    ********************************************************
    *******************************************************
    ******************************************************
    *****************************************************
    ****************************************************
    ***************************************************
    **************************************************
    *************************************************
    ************************************************
    ***********************************************
    **********************************************
    *********************************************
	// *** >>>> Template helpers <<<<
    *********************************************
    **********************************************
    ***********************************************
    ************************************************
    *************************************************
    **************************************************
    ***************************************************
    ****************************************************
    *****************************************************
    ******************************************************
    *******************************************************
    ********************************************************
    *********************************************************
    **********************************************************
   **/
#>

<#+
	private void ParseActions(MappingAction[] actions)
	{
#>
<#+ foreach(var action in actions.GroupBy(action => action.VarName).Select(group => group.First())) { #>
<#+ if(!string.IsNullOrEmpty(action.Description)) { #>
		/// <summary>
		/// <#=action.Description.Replace("\n","").Replace("\r", " \r\n\t\t/// ") #>
		/// </summary>
<#+ } #>
		public class <#=action.VarName#> : CrmActionBase<<#=action.VarName#>.Inputs, <#=action.VarName#>.Outputs>
		{
			public <#=action.VarName#>() : base("<#=action.Name#>") { }
			public <#=action.VarName#>(IOrganizationService service) : base(service, "<#=action.Name#>") { }
				
<#+
		if (action.InputFields.Any(field => !field.Optional))
		{
#>
			public <#=action.VarName#>(
<#+
	var addComma = false;
	for(var i = 0; i < action.InputFields.Length; i++)
	{
		var inputField = action.InputFields[i];

		if (!inputField.Optional)
		{
			var typeString = (inputField.VarName == "Target") ? "Guid" : inputField.TypeName;
#>				<#+ if(addComma){ #>, <#+ } addComma = true; #><#= typeString #> <#= inputField.VarName #>
<#+ } #>
<#+ } if(addComma){ #>				, <#+ } #>IOrganizationService service = null) : this()
			{
				Service = service;
<#+
	for(var i = 0; i < action.InputFields.Length; i++)
	{
		var inputField = action.InputFields[i];

		if (!inputField.Optional)
		{
#>
				InputParams.<#=inputField.VarName#> = <#=inputField.VarName#>;
<#+}#>
<#+}#>
			}
<#+}#>
			public class Inputs : InputsBase
			{
				public Inputs() : base() { }
				public Inputs(OrganizationRequest request) : base(request) { }

<#+ foreach(var inputField in action.InputFields) {
		var typeString = (inputField.VarName == "Target") ? "Guid" : inputField.TypeName;
#>
<#+ if(inputField.Optional) { #>
				/// <summary>
				///		OPTIONAL!
				/// </summary>
<#+ } #>
				public <#= typeString #> <#= inputField.VarName == "Request" ? "RequestParam" : inputField.VarName #>
				{
					get => <#+ if (inputField.VarName == "Target") { #>((EntityReference) Request["<#=inputField.Name#>"]).Id;
<#+ } else { #>(<#= typeString #>) Request["<#=inputField.Name#>"];
<#+ } #>
					set => <#+ if (inputField.VarName == "Target") { #>Request["<#=inputField.Name#>"] = new EntityReference("<#= action.TargetEntityName #>", value);
<#+ } else { #>Request["<#=inputField.Name#>"] = value;
<#+ } #>
				}
<#+ } #>
			}
				
			public class Outputs : OutputsBase
			{
				public Outputs() : base() { }
				public Outputs(OrganizationResponse response) : base(response) { }

<#+ foreach(var outputField in action.OutputFields) { #>
				public <#= outputField.TypeName #> <#= outputField.VarName == "Response" ? "ResponseParam" : outputField.VarName #> => (<#= outputField.TypeName #>) Response["<#=outputField.Name#>"];
<#+ } #>
			}
		}

<#+ } #>
<#+ } #>
<#+
    // Credit :http://stackoverflow.com/questions/323640/can-i-convert-a-c-sharp-string-value-to-an-escaped-string-literal
    private static string ToLiteral(string input)
    {
        using (var writer = new StringWriter())
        {
            using (var provider = CodeDomProvider.CreateProvider("CSharp"))
            {
                provider.GenerateCodeFromExpression(new CodePrimitiveExpression(input), writer, null);
                return writer.ToString();
            }
        }
    }

	private static string ConvertToContractType(MappingField field, string attributeName)
	{
		var crmType = field.TargetTypeForCrmSvcUtil;

		if (crmType.Contains("OptionSetValue") || field.IsStateCode)
		{
			if (field.EnumData?.IsGlobal == true)
            {
				return field.EnumData.LogicalName + "?";
            }
			else
			{
				return attributeName + "Enum?";
            }
		}
        else if (field.EnumData != null && field.EnumData.IsMultiSelect)
        {
            return attributeName + "Enum[]";
        }
		else if (crmType.Contains("EntityReference") && !string.IsNullOrEmpty(field.LookupData == null ? null : field.LookupData.LookupSingleType))
		{
			return "Guid?";
		}
		else if (crmType.Contains("Money"))
		{
			return "decimal?";
		}
		else
		{
			return crmType;
		}
	}

    private static TValue FirstNotNullOrDefault<TKey, TValue>(IDictionary<TKey, TValue> dictionary, params TKey[] keys)
    {
		if (dictionary == null) return default(TValue);
		return Enumerable.FirstOrDefault<TValue>(Enumerable.Select<TKey, TValue>(Enumerable.Where<TKey>((IEnumerable<TKey>) keys, new Func<TKey, bool>(dictionary.ContainsKey)), (Func<TKey, TValue>) (key => dictionary[key])));
    }

    private static string FirstNotNullOrEmpty<TKey>(IDictionary<TKey, string> dictionary, params TKey[] keys)
    {
		if (dictionary == null) return default(string);
        return Enumerable.FirstOrDefault<string>(Enumerable.Select<TKey, string>(Enumerable.Where<TKey>((IEnumerable<TKey>)keys, (Func<TKey, bool>)(key =>
        {
            if (dictionary.ContainsKey(key))
                return !string.IsNullOrEmpty(dictionary[key]);
            return false;
        })), (Func<TKey, string>)(key => dictionary[key])));
    }

	// Credit: https://damieng.com/blog/2009/11/06/multiple-outputs-from-t4-made-easy-revisited
	// Manager class records the various blocks so it can split them up
	class Manager {
		private class Block {
			public String Name;
			public int Start, Length;
		}

		private Block currentBlock;
		private List<Block> files = new List<Block>();
		private Block footer = new Block();
		private Block header = new Block();
		private ITextTemplatingEngineHost host;
		private StringBuilder template;
		protected List<String> generatedFileNames = new List<String>();

		public static Manager Create(ITextTemplatingEngineHost host, StringBuilder template) {
			return (host is IServiceProvider) ? new VSManager(host, template) : new Manager(host, template);
		}

		public void StartNewFile(String name) {
			if (name == null)
				throw new ArgumentNullException("name");
			CurrentBlock = new Block { Name = name };
		}

		public void StartFooter() {
			CurrentBlock = footer;
		}

		public void StartHeader() {
			CurrentBlock = header;
		}

		public void EndBlock() {
			if (CurrentBlock == null)
				return;
			CurrentBlock.Length = template.Length - CurrentBlock.Start;
			if (CurrentBlock != header && CurrentBlock != footer)
				files.Add(CurrentBlock);
			currentBlock = null;
		}

		public virtual void Process(bool split) {
			if (split) {
				EndBlock();
				String headerText = template.ToString(header.Start, header.Length);
				String footerText = template.ToString(footer.Start, footer.Length);
				String outputPath = Path.GetDirectoryName(host.TemplateFile);
				files.Reverse();
				foreach(Block block in files) {
					String fileName = Path.Combine(outputPath, block.Name);
					String content = headerText + template.ToString(block.Start, block.Length) + footerText;
					generatedFileNames.Add(fileName);
					CreateFile(fileName, content);
					template.Remove(block.Start, block.Length);
				}
			}
		}

		protected virtual void CreateFile(String fileName, String content) {
			if (IsFileContentDifferent(fileName, content))
				File.WriteAllText(fileName, content);
		}

		public virtual String GetCustomToolNamespace(String fileName) {
			return null;
		}

		public virtual String DefaultProjectNamespace {
			get { return null; }
		}

		protected bool IsFileContentDifferent(String fileName, String newContent) {
			return !(File.Exists(fileName) && File.ReadAllText(fileName) == newContent);
		}

		private Manager(ITextTemplatingEngineHost host, StringBuilder template) {
			this.host = host;
			this.template = template;
		}

		private Block CurrentBlock {
			get { return currentBlock; }
			set {
				if (CurrentBlock != null)
					EndBlock();
				if (value != null)
					value.Start = template.Length;
				currentBlock = value;
			}
		}

		private class VSManager: Manager {
			private EnvDTE.ProjectItem templateProjectItem;
			private EnvDTE.DTE dte;
			private Action<String> checkOutAction;
			private Action<IEnumerable<String>> projectSyncAction;

			public override String DefaultProjectNamespace {
				get {
					return templateProjectItem.ContainingProject.Properties.Item("DefaultNamespace").Value.ToString();
				}
			}

			public override String GetCustomToolNamespace(string fileName) {
				return dte.Solution.FindProjectItem(fileName).Properties.Item("CustomToolNamespace").Value.ToString();
			}

			public override void Process(bool split) {
				if (templateProjectItem.ProjectItems == null)
					return;
				base.Process(split);
				projectSyncAction.EndInvoke(projectSyncAction.BeginInvoke(generatedFileNames, null, null));
			}

			protected override void CreateFile(String fileName, String content) {
				if (IsFileContentDifferent(fileName, content)) {
					CheckoutFileIfRequired(fileName);
					File.WriteAllText(fileName, content);
				}
			}

			internal VSManager(ITextTemplatingEngineHost host, StringBuilder template)
				: base(host, template) {
				var hostServiceProvider = (IServiceProvider) host;
				if (hostServiceProvider == null)
					throw new ArgumentNullException("Could not obtain IServiceProvider");
				dte = (EnvDTE.DTE) hostServiceProvider.GetService(typeof(EnvDTE.DTE));
				if (dte == null)
					throw new ArgumentNullException("Could not obtain DTE from host");
				templateProjectItem = dte.Solution.FindProjectItem(host.TemplateFile);
				checkOutAction = (String fileName) => dte.SourceControl.CheckOutItem(fileName);
				projectSyncAction = (IEnumerable<String> keepFileNames) => ProjectSync(templateProjectItem, keepFileNames);
			}

			private static void ProjectSync(EnvDTE.ProjectItem templateProjectItem, IEnumerable<String> keepFileNames) {
				var keepFileNameSet = new HashSet<String>(keepFileNames);
				var projectFiles = new Dictionary<String, EnvDTE.ProjectItem>();
				var originalFilePrefix = Path.GetFileNameWithoutExtension(templateProjectItem.get_FileNames(0)) + ".";
				foreach(EnvDTE.ProjectItem projectItem in templateProjectItem.ProjectItems)
					projectFiles.Add(projectItem.get_FileNames(0), projectItem);

				// Remove unused items from the project
				foreach(var pair in projectFiles)
					if (!keepFileNames.Contains(pair.Key) && !(Path.GetFileNameWithoutExtension(pair.Key) + ".").StartsWith(originalFilePrefix))
						pair.Value.Delete();

				// Add missing files to the project
				foreach(String fileName in keepFileNameSet)
					if (!projectFiles.ContainsKey(fileName))
						templateProjectItem.ProjectItems.AddFromFile(fileName);
			}

			private void CheckoutFileIfRequired(String fileName) {
				var sc = dte.SourceControl;
				if (sc != null && sc.IsItemUnderSCC(fileName) && !sc.IsItemCheckedOut(fileName))
					checkOutAction.EndInvoke(checkOutAction.BeginInvoke(fileName, null, null));
			}
		}
	}
#>
